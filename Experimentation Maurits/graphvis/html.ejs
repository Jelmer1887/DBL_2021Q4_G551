<!--I'm not using this file, this was just experimentation -->

<!DOCTYPE html>

<html>
    <head>
        <meta charset="utf-8">
        <title>Graph of a network</title>
        <link rel="stylesheet" href= "http://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css">
    </head>
    <body>
        <style>.links line {
            stroke: #999;
            stroke-opacity: 0.6;
            } 
            .nodes circle {
            stroke: #fff;
            stroke-width: 1.5px;
            }
          </style>
        <div class = "bordered">
            <svg width = "960" height = "500"></svg>
            <script type="text/javascript" src = "./d3.js"></script>
            <script>var svg = d3.select("svg");
                var width = svg.attr("width");
                var height = svg.attr("height");
                
                async function getData(){
                  const response = await fetch("./enron-v1.csv");
                  const data = await response.text();
                  //console.log(data);
                  return data
                }
                
                async function parseData(dataText) {
                    var data = d3.csvParseRows(await dataText);
                    //console.log(data[1][1]);
                    return data
                }
                
                async function makeLinks(someData) {
                    var d = await someData;
                    var links = [];
                    for(i = 1; i<d.length; i++) {
                        links.push({source: parseInt(d[i][1]), target: parseInt(d[i][4])});
                    }
                    console.log(links);
                    return links;
                }
                
                async function makeNodes(l){
                    var links = await l;
                    var nodes = [];
                    links.forEach(function(link) {
                        //For each source ID, add it to the nodes, no duplicates
                        link.source = nodes[link.source] || 
                        (nodes[link.fromEmail] = {id: link.source}); 
                    //For each target ID, add it to the nodes, no duplicates
                        link.target = nodes[link.target] ||
                        (nodes[link.target] = {id: link.target})
                    });
                    console.log(nodes); //shows undefined: {id:92} but still displays this id as intended in array. 92 occurs twice, where the person sent themselves an email.
                    return nodes;
                }
                
                
                
                
                var linksArray = makeLinks(parseData(getData()));
                var nodesArray = makeNodes(makeLinks(parseData(getData())));
                
                //behaviour of our simulation
                async function makeSimulation(l, n){
                var links = await l;
                var nodes = await n;
                var simulation = d3
                    .forceSimulation(nodes)
                    .force("link", d3.forceLink(links))
                    .force("charge", d3.forceManyBody().strength(-30))
                    .force("center", d3.forceCenter(width/2, height/2))
                    .on("tick", ticked);
                }
                
                //tells how to draw a node
                var node = svg
                    .append("g") 
                    .selectAll("circle")
                    .data(nodesArray)
                    .enter()
                    .append("circle")
                    .attr("r", 5)
                    .attr("fill", function(d) {
                        return "orange";
                    })
                    .attr("stroke", "yellow");
                
                //tells how to draw an edge
                var link = svg
                    .append("g")
                    .attr("class", "links")
                    .selectAll("line")
                    .data(linksArray)
                    .enter()
                    .append("line")
                    .attr("stroke-width", function(d) {
                      return 3;
                    });
                
                //what the simulation does on a tick
                function ticked() {
                    link
                      .attr("x1", function(d) {
                        return d.source.x;
                      })
                      .attr("y1", function(d) {
                        return d.source.y;
                      })
                      .attr("x2", function(d) {
                        return d.target.x;
                      })
                      .attr("y2", function(d) {
                        return d.target.y;
                      });
                
                    node
                      .attr("cx", function(d) {
                        return d.x;
                      })
                      .attr("cy", function(d) {
                        return d.y;
                      });
                      console.log("tick");
                }
                </script>
            <!--<script type = "text/javascript" src = "./force_dir_graph.js"></script> -->
            
        </div>
    </body>
</html>
