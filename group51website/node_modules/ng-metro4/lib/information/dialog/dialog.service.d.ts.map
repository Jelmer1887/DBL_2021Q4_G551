{"version":3,"file":"dialog.service.d.ts","sources":["dialog.service.d.ts"],"names":[],"mappingssourcesContent":["import { ApplicationRef, ComponentFactoryResolver, Injector } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { M4FormGroup } from '../../form/m4-form-group';\r\nexport interface DialogOptions {\r\n    title?: string;\r\n    content?: string | any;\r\n    actions?: {\r\n        caption: string;\r\n        cls: string;\r\n        onclick: () => void;\r\n    }[];\r\n    actionsAlign?: 'left' | 'right';\r\n    defaultAction?: boolean;\r\n    overlay?: boolean;\r\n    overlayColor?: string;\r\n    overlayAlpha?: number;\r\n    overlayClickClose?: boolean;\r\n    width?: number;\r\n    closeAction?: boolean;\r\n    clsDialog?: string;\r\n    clsTitle?: string;\r\n    clsContent?: string;\r\n    clsAction?: string;\r\n    clsDefaultAction?: string;\r\n    autoHide?: number;\r\n    removeOnClose?: boolean;\r\n    show?: boolean;\r\n}\r\nexport interface InfoboxOptions {\r\n    type?: 'default' | 'success' | 'info' | 'alert' | 'warning';\r\n    width?: number;\r\n    height?: number;\r\n    overlay?: boolean;\r\n    overlayColor?: string;\r\n    overlayAlpha?: string;\r\n    autoHide?: number;\r\n    removeOnClose?: boolean;\r\n    closeButton?: boolean;\r\n    clsBox?: string;\r\n    clsBoxContent?: string;\r\n    clsOverlay?: string;\r\n}\r\nexport declare class DialogService {\r\n    private componentFactoryResolver;\r\n    private appRef;\r\n    private injector;\r\n    constructor(componentFactoryResolver: ComponentFactoryResolver, appRef: ApplicationRef, injector: Injector);\r\n    /**\r\n     * Create a custom dialog\r\n     * @param options The options of the dialog\r\n     */\r\n    create(options: DialogOptions): any;\r\n    /**\r\n     * Close a created dialog\r\n     * @param dialogObj The object returned by the create method\r\n     */\r\n    close(dialogObj: any): any;\r\n    /**\r\n     * Shows an alert dialog\r\n     * @param title The title of the dialog\r\n     * @param message The message of the dialog\r\n     * @param cls Optional css classes\r\n     * @param okBtnText The text of the OK-Button\r\n     * @param okBtnCls An optional css class for the OK-Button\r\n     */\r\n    alert(title: string, message: string, cls?: string, okBtnText?: string, okBtnCls?: string): Observable<void>;\r\n    /**\r\n     * Shows a confirm dialog\r\n     * @param title The title of the confirm\r\n     * @param message The message of the confirm\r\n     * @param yesBtnText The text for the Yes-Button\r\n     * @param noBtnText The text for the No-Button\r\n     * @param cls An optional css class for the dialog\r\n     * @param yesBtnCls An optional css class for the Yes-Button\r\n     * @param noBtnCls An optional css class for the No-Button\r\n     */\r\n    confirm(title: string, message: string, yesBtnText?: string, noBtnText?: string, cls?: string, yesBtnCls?: string, noBtnCls?: string): Observable<boolean>;\r\n    /**\r\n     * Show a prompt dialog\r\n     * @param title The title of the prompt\r\n     * @param message The message of the prompt\r\n     * @param submitBtnText The text of the Submit-Button\r\n     * @param placeholder The placeholder of the input\r\n     * @param cls An optional css class for the dialog\r\n     * @param submitBtnCls An optional css class for Submit-Button\r\n     * @param inputCls An optional css class for the input\r\n     */\r\n    prompt(title: string, message: string, submitBtnText?: string, placeholder?: string, cls?: string, submitBtnCls?: string, inputCls?: string): Observable<string>;\r\n    /**\r\n     * Show a prompt dialog that contains a form\r\n     * @param title The title of the prompt\r\n     * @param form The form group\r\n     * @param submitBtnText The text of the Submit-Button\r\n     * @param abortBtnText The text of the Abort-Button\r\n     * @param placeholder The placeholder of the input\r\n     * @param cls An optional css class for the dialog\r\n     * @param submitBtnCls An optional css class for Submit-Button\r\n     * @param abortBtnCls An optional css class for Abort-Button\r\n     */\r\n    formPrompt<T = string>(title: string, form: M4FormGroup, submitBtnText?: string, abortBtnText?: string, placeholder?: string, cls?: string, submitBtnCls?: string, abortBtnCls?: string): Observable<T>;\r\n    /**\r\n     * Show a dialog that contains a component\r\n     * @param component The component class to render\r\n     * @param dialogData Data to pass to the new component instance\r\n     * @param title The title of the dialog\r\n     * @param closeBtnText Custom text for the close button\r\n     * @param cls Custom dialog class (accent, size etc.)\r\n     * @param closeBtnCls Custom close button class\r\n     */\r\n    show<TOutput = null>(component: new (...args: any[]) => any, dialogData?: any, title?: string, closeBtnText?: string, cls?: string, closeBtnCls?: string): Observable<TOutput>;\r\n    /**\r\n     * Show an info dialog\r\n     * @param content The content of the info\r\n     * @param options Options for info\r\n     */\r\n    info(content: string, options?: InfoboxOptions): {\r\n        setContent: (content: string) => void;\r\n        setType: (type: 'default' | 'success' | 'info' | 'alert' | 'warning') => void;\r\n        close: () => void;\r\n    };\r\n}\r\n"]}