import { ControlBase } from '../control-base';
import { PositionBaseType, ThinType } from '../../helper/types';
import * as ɵngcc0 from '@angular/core';
export declare class SliderComponent extends ControlBase<number> {
    min: number;
    max: number;
    showMinMax: boolean;
    accuracy: number;
    buffer: number;
    hint: boolean;
    hintAlways: boolean;
    hintPosition: PositionBaseType;
    hintMask: string;
    vertical: boolean;
    size: number;
    thin: ThinType;
    cycleMarker: boolean;
    clsSlider: string;
    clsBackside: string;
    clsComplete: string;
    clsBuffer: string;
    clsMarker: string;
    clsHint: string;
    clsMinMax: string;
    clsMin: string;
    clsMax: string;
    private input;
    private slider;
    private clonedElement;
    createControl(): Promise<void>;
    disable(disabled: boolean): void;
    newValue(): void;
    newClassValue(newClasses: string[], oldClasses: string[]): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<SliderComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<SliderComponent, "m4-slider", never, { "min": "min"; "max": "max"; "showMinMax": "show-min-max"; "accuracy": "accuracy"; "buffer": "buffer"; "hint": "hint"; "hintAlways": "hint-always"; "hintPosition": "hint-position"; "hintMask": "hint-mask"; "vertical": "vertical"; "size": "size"; "thin": "thin"; "cycleMarker": "cycle-marker"; "clsSlider": "cls-slider"; "clsBackside": "cls-backside"; "clsComplete": "cls-complete"; "clsBuffer": "cls-buffer"; "clsMarker": "cls-marker"; "clsHint": "cls-hint"; "clsMinMax": "cls-min-max"; "clsMin": "cls-min"; "clsMax": "cls-max"; }, {}, never, never>;
}

//# sourceMappingURL=slider.component.d.ts.map