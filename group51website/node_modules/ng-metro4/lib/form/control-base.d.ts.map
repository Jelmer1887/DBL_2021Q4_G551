{"version":3,"file":"control-base.d.ts","sources":["control-base.d.ts"],"names":[],"mappings":"AAAA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ControlValueAccessor } from '@angular/forms';\r\nimport { AfterViewInit, ChangeDetectorRef, ElementRef, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';\r\nexport declare abstract class ControlBase<T> implements ControlValueAccessor, AfterViewInit, OnChanges, OnDestroy {\r\n    mainElement: ElementRef;\r\n    private cdRef;\r\n    private classObserver;\r\n    private disabled;\r\n    private currentClasses;\r\n    innerValue: T;\r\n    disableUpdate: boolean;\r\n    touchCallback: () => void;\r\n    changeCallback: (currentValue: T) => void;\r\n    constructor(mainElement: ElementRef, cdRef: ChangeDetectorRef);\r\n    private observeClassValue;\r\n    abstract newClassValue(newClasses: string[], oldClasses: string[]): any;\r\n    changeValue(newValue: T, callback?: boolean): void;\r\n    registerOnChange(fn: (v: T) => void): void;\r\n    registerOnTouched(fn: () => void): void;\r\n    abstract disable(disabled: boolean): any;\r\n    setDisabledState(isDisabled: boolean): void;\r\n    abstract newValue(): any;\r\n    callNewValue(): void;\r\n    writeValue(newValue: T): void;\r\n    abstract createControl(): Promise<void>;\r\n    ngAfterViewInit(): void;\r\n    ngOnChanges(changes: SimpleChanges): void;\r\n    ngOnDestroy(): void;\r\n    updateProperty(key: keyof this, newValue: any): void;\r\n}\r\n"]}