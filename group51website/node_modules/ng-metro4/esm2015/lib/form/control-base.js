import { __decorate, __metadata, __param } from "tslib";
import { AfterViewInit, ChangeDetectorRef, ElementRef, OnChanges, OnDestroy, Optional, SimpleChange, SimpleChanges, Directive } from '@angular/core';
import { ObjectHelper } from '../helper/object-helper';
import { asapScheduler } from 'rxjs';
import { AttributeHelper } from '../helper/attribute-helper';
let ControlBase = class ControlBase {
    constructor(mainElement, cdRef) {
        this.mainElement = mainElement;
        this.cdRef = cdRef;
        this.disableUpdate = false;
        this.touchCallback = () => { };
        this.changeCallback = (_) => { };
    }
    observeClassValue() {
        this.classObserver = AttributeHelper.createObserver(this.mainElement, (newClasses, oldClasses) => {
            this.currentClasses = newClasses;
            this.newClassValue(newClasses, oldClasses);
        });
    }
    changeValue(newValue, callback = true) {
        if (this.disableUpdate) {
            return;
        }
        if (ObjectHelper.compare(newValue, this.innerValue)) {
            return;
        }
        this.innerValue = newValue;
        if (callback) {
            this.changeCallback(this.innerValue);
        }
    }
    registerOnChange(fn) {
        this.changeCallback = fn;
    }
    registerOnTouched(fn) {
        this.touchCallback = fn;
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
        this.disable(isDisabled);
    }
    callNewValue() {
        this.disableUpdate = true;
        this.newValue();
        this.disableUpdate = false;
    }
    writeValue(newValue) {
        this.innerValue = newValue;
        this.callNewValue();
    }
    ngAfterViewInit() {
        this.createControl().then(() => {
            this.callNewValue();
            this.observeClassValue();
        });
    }
    ngOnChanges(changes) {
        asapScheduler.schedule(() => {
            this.createControl().then(() => {
                this.setDisabledState(this.disabled);
                this.callNewValue();
                if (this.currentClasses) {
                    this.newClassValue(this.currentClasses, []);
                }
            });
        });
    }
    ngOnDestroy() {
        if (this.classObserver) {
            this.classObserver.disconnect();
        }
    }
    updateProperty(key, newValue) {
        const oldValue = this[key];
        if (oldValue !== newValue) {
            this[key] = newValue;
            if (this.cdRef) {
                this.cdRef.detectChanges();
            }
            const changes = {};
            changes[key] = { previousValue: oldValue, currentValue: newValue, firstChange: false };
            this.ngOnChanges(changes);
        }
    }
};
ControlBase.ctorParameters = () => [
    { type: ElementRef, decorators: [{ type: Optional }] },
    { type: ChangeDetectorRef }
];
ControlBase = __decorate([
    Directive(),
    __param(0, Optional()),
    __metadata("design:paramtypes", [ElementRef, ChangeDetectorRef])
], ControlBase);
export { ControlBase };
//# sourceMappingURL=data:application/json;base64,