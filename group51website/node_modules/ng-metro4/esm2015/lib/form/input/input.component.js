var InputComponent_1;
import { __decorate, __metadata } from "tslib";
import { ChangeDetectionStrategy, Component, ElementRef, EventEmitter, Input, Output, ViewChild, ViewEncapsulation } from '@angular/core';
import { ControlBase } from '../control-base';
import { DefaultValueAccessor } from '../../helper/default-value-accessor';
import { TypeAlias } from '../../helper/type-alias';
import { asapScheduler } from 'rxjs';
import { ObjectHelper } from '../../helper/object-helper';
let InputComponent = InputComponent_1 = class InputComponent extends ControlBase {
    constructor() {
        super(...arguments);
        this.searchButtonClick = new EventEmitter();
        this.readonly = false;
        this.placeholder = '';
        this.type = 'text';
        this.customButtons = [];
    }
    createControl() {
        return new Promise((complete) => {
            const originalElement = $(this.input.nativeElement);
            ObjectHelper.hide(originalElement);
            if (this.clonedElement) {
                this.clonedElement.parent().remove();
            }
            this.clonedElement = originalElement.clone();
            ObjectHelper.show(this.clonedElement);
            originalElement.parent().append(this.clonedElement);
            this.inputObj = this.clonedElement.input({
                customButtons: this.customButtons,
                onSearchButtonClick: (val) => this.searchButtonClick.emit(val)
            }).data('input');
            this.clonedElement.one('blur', () => {
                this.touchCallback();
            });
            this.clonedElement.on('keydown change', (event) => {
                asapScheduler.schedule(() => {
                    let newValue = this.clonedElement.val();
                    if (this.type === 'number') {
                        newValue = +newValue;
                    }
                    this.changeValue(newValue);
                }, 1);
            });
            complete();
        });
    }
    disable(disabled) {
        if (disabled) {
            this.inputObj.disable();
        }
        else {
            this.inputObj.enable();
        }
    }
    newValue() {
        if (!this.inputObj) {
            return;
        }
        this.clonedElement.val(this.innerValue);
    }
    newClassValue(newClasses, oldClasses) {
        if (this.clonedElement) {
            const target = this.clonedElement.parent();
            oldClasses.forEach((cls) => {
                target.removeClass(cls);
            });
            newClasses.forEach((cls) => {
                target.addClass(cls);
            });
        }
    }
};
__decorate([
    Output('search-button-click'),
    __metadata("design:type", Object)
], InputComponent.prototype, "searchButtonClick", void 0);
__decorate([
    Input('readonly'),
    __metadata("design:type", Object)
], InputComponent.prototype, "readonly", void 0);
__decorate([
    Input('placeholder'),
    __metadata("design:type", Object)
], InputComponent.prototype, "placeholder", void 0);
__decorate([
    Input('type'),
    __metadata("design:type", String)
], InputComponent.prototype, "type", void 0);
__decorate([
    Input('default-value'),
    __metadata("design:type", Object)
], InputComponent.prototype, "defaultValue", void 0);
__decorate([
    Input('size'),
    __metadata("design:type", Number)
], InputComponent.prototype, "size", void 0);
__decorate([
    Input('prepend'),
    __metadata("design:type", String)
], InputComponent.prototype, "prepend", void 0);
__decorate([
    Input('append'),
    __metadata("design:type", String)
], InputComponent.prototype, "append", void 0);
__decorate([
    Input('clear-button'),
    __metadata("design:type", Boolean)
], InputComponent.prototype, "clearButton", void 0);
__decorate([
    Input('clear-button-icon'),
    __metadata("design:type", String)
], InputComponent.prototype, "clearButtonIcon", void 0);
__decorate([
    Input('reveal-button'),
    __metadata("design:type", Boolean)
], InputComponent.prototype, "revealButton", void 0);
__decorate([
    Input('reveal-button-icon'),
    __metadata("design:type", String)
], InputComponent.prototype, "revealButtonIcon", void 0);
__decorate([
    Input('custom-buttons'),
    __metadata("design:type", Array)
], InputComponent.prototype, "customButtons", void 0);
__decorate([
    Input('search-button'),
    __metadata("design:type", Boolean)
], InputComponent.prototype, "searchButton", void 0);
__decorate([
    Input('search-button-icon'),
    __metadata("design:type", String)
], InputComponent.prototype, "searchButtonIcon", void 0);
__decorate([
    Input('autocomplete'),
    __metadata("design:type", Array)
], InputComponent.prototype, "autocomplete", void 0);
__decorate([
    Input('autocomplete-list-height'),
    __metadata("design:type", Number)
], InputComponent.prototype, "autocompleteListHeight", void 0);
__decorate([
    Input('cls-component'),
    __metadata("design:type", String)
], InputComponent.prototype, "clsComponent", void 0);
__decorate([
    Input('cls-input'),
    __metadata("design:type", String)
], InputComponent.prototype, "clsInput", void 0);
__decorate([
    Input('cls-prepend'),
    __metadata("design:type", String)
], InputComponent.prototype, "clsPrepend", void 0);
__decorate([
    Input('cls-append'),
    __metadata("design:type", String)
], InputComponent.prototype, "clsAppend", void 0);
__decorate([
    Input('cls-clear-button'),
    __metadata("design:type", String)
], InputComponent.prototype, "clsClearButton", void 0);
__decorate([
    Input('cls-reveal-button'),
    __metadata("design:type", String)
], InputComponent.prototype, "clsRevealButton", void 0);
__decorate([
    Input('cls-custom-button'),
    __metadata("design:type", String)
], InputComponent.prototype, "clsCustomButton", void 0);
__decorate([
    ViewChild('input', { static: true }),
    __metadata("design:type", ElementRef)
], InputComponent.prototype, "input", void 0);
InputComponent = InputComponent_1 = __decorate([
    Component({
        selector: 'm4-input',
        template: "<input [type]=\"type\" #input\r\n\r\n       [readonly]=\"readonly\"\r\n       [placeholder]=\"placeholder\"\r\n\r\n       [attr.data-default-value]=\"defaultValue\"\r\n       [attr.data-size]=\"size\"\r\n       [attr.data-prepend]=\"prepend\"\r\n       [attr.data-append]=\"append\"\r\n       [attr.data-clear-button]=\"clearButton\"\r\n       [attr.data-clear-button-icon]=\"clearButtonIcon\"\r\n       [attr.data-reveal-button]=\"revealButton\"\r\n       [attr.data-reveal-button-icon]=\"revealButtonIcon\"\r\n       [attr.data-search-button]=\"searchButton\"\r\n       [attr.data-search-button-icon]=\"searchButtonIcon\"\r\n       data-search-button-click=\"custom\"\r\n       [attr.data-autocomplete]=\"autocomplete?.join(',')\"\r\n       [attr.data-autocomplete-list-height]=\"autocompleteListHeight\"\r\n\r\n       [attr.data-cls-component]=\"clsComponent\"\r\n       [attr.data-cls-input]=\"clsInput\"\r\n       [attr.data-cls-prepend]=\"clsPrepend\"\r\n       [attr.data-cls-append]=\"clsAppend\"\r\n       [attr.data-cls-clear-button]=\"clsClearButton\"\r\n       [attr.data-cls-reveal-button]=\"clsRevealButton\"\r\n       [attr.data-cls-custom-button]=\"clsCustomButton\">\r\n",
        providers: [DefaultValueAccessor.get(InputComponent_1), TypeAlias.get(InputComponent_1)],
        encapsulation: ViewEncapsulation.None,
        changeDetection: ChangeDetectionStrategy.OnPush,
        styles: ["m4-input .autocomplete-list{z-index:1000}"]
    })
], InputComponent);
export { InputComponent };
//# sourceMappingURL=data:application/json;base64,