var FileInputComponent_1;
import { __decorate, __metadata } from "tslib";
import { ChangeDetectionStrategy, Component, ElementRef, Input, ViewChild, ViewEncapsulation } from '@angular/core';
import { ControlBase } from '../control-base';
import { DefaultValueAccessor } from '../../helper/default-value-accessor';
import { TypeAlias } from '../../helper/type-alias';
import { ObjectHelper } from '../../helper/object-helper';
let FileInputComponent = FileInputComponent_1 = class FileInputComponent extends ControlBase {
    constructor() {
        super(...arguments);
        this.multiple = false;
        this.accept = '';
        this.read = '';
        this.drop = false;
    }
    createControl() {
        return new Promise((complete) => {
            const originalElement = $(this.input.nativeElement);
            ObjectHelper.hide(originalElement);
            if (this.clonedElement) {
                this.clonedElement.parent().remove();
            }
            this.clonedElement = originalElement.clone();
            ObjectHelper.show(this.clonedElement);
            originalElement.parent().append(this.clonedElement);
            this.fileInput = this.clonedElement.file().data('file');
            if (this.drop) {
                if (this.buttonTitle) {
                    const captionElement = this.clonedElement.closest('label.drop-zone').find('span.caption');
                    captionElement.html(this.buttonTitle);
                }
                if (this.infoText) {
                    this.updateInfoText();
                }
            }
            this.fileInput.options.onSelect = (files) => {
                if (this.multiple) {
                    const result = [];
                    for (let i = 0; i < files.length; i++) {
                        result.push(files[i]);
                    }
                    if (this.read) {
                        this.readFiles(files);
                    }
                    else {
                        this.changeValue(result);
                    }
                }
                else {
                    if (this.read) {
                        this.readFiles(files);
                    }
                    else {
                        this.changeValue(files[0]);
                    }
                }
                if (this.drop && this.infoText) {
                    this.updateInfoText();
                }
            };
            this.clonedElement.one('blur', () => {
                this.touchCallback();
            });
            complete();
        });
    }
    readFiles(files) {
        const fileLoadPromises = [];
        for (let i = 0; i < files.length; i++) {
            const file = files[i];
            const loadPromise = new Promise((resolve) => {
                const reader = new FileReader();
                reader.onload = (e) => {
                    resolve({ content: reader.result, file: file });
                };
                switch (this.read) {
                    case 'arrayBuffer':
                        reader.readAsArrayBuffer(file);
                        break;
                    case 'binaryString':
                        reader.readAsBinaryString(file);
                        break;
                    case 'dataUrl':
                        reader.readAsDataURL(file);
                        break;
                    case 'text':
                    default:
                        reader.readAsText(file);
                        break;
                }
            });
            fileLoadPromises.push(loadPromise);
        }
        Promise.all(fileLoadPromises).then((fileEntries) => {
            if (this.multiple) {
                this.changeValue(fileEntries);
            }
            else {
                this.changeValue(fileEntries[0]);
            }
        });
    }
    disable(disabled) {
        if (disabled) {
            this.fileInput.disable();
        }
        else {
            this.fileInput.enable();
        }
    }
    newValue() {
        if (!this.fileInput || this.drop || this.read || !this.innerValue) {
            return;
        }
        let name;
        if (this.innerValue instanceof Array) {
            name = this.innerValue.map((v) => {
                if (v instanceof File) {
                    return v.name;
                }
                else {
                    return v.file.name;
                }
            }).join(', ');
        }
        else {
            name = this.innerValue instanceof File ? this.innerValue.name : this.innerValue.file.name;
        }
        this.clonedElement.parent().find('span.caption').html(name);
    }
    newClassValue(newClasses, oldClasses) {
        if (this.clonedElement) {
            const target = this.clonedElement.parent();
            oldClasses.forEach((cls) => {
                target.removeClass(cls);
            });
            newClasses.forEach((cls) => {
                target.addClass(cls);
            });
        }
    }
    updateInfoText() {
        const infoTextContent = this.infoText
            .split('{0}')
            .join(this.innerValue instanceof Array ? `${this.innerValue.length}` : this.innerValue ? '1' : '0');
        const infoTextElement = this.clonedElement.closest('label.drop-zone').find('span.files');
        infoTextElement.html(infoTextContent);
    }
};
__decorate([
    Input('multiple'),
    __metadata("design:type", Object)
], FileInputComponent.prototype, "multiple", void 0);
__decorate([
    Input('accept'),
    __metadata("design:type", Object)
], FileInputComponent.prototype, "accept", void 0);
__decorate([
    Input('read'),
    __metadata("design:type", String)
], FileInputComponent.prototype, "read", void 0);
__decorate([
    Input('prepend'),
    __metadata("design:type", String)
], FileInputComponent.prototype, "prepend", void 0);
__decorate([
    Input('button-title'),
    __metadata("design:type", String)
], FileInputComponent.prototype, "buttonTitle", void 0);
__decorate([
    Input('info-text'),
    __metadata("design:type", String)
], FileInputComponent.prototype, "infoText", void 0);
__decorate([
    Input('drop'),
    __metadata("design:type", Object)
], FileInputComponent.prototype, "drop", void 0);
__decorate([
    Input('cls-component'),
    __metadata("design:type", String)
], FileInputComponent.prototype, "clsComponent", void 0);
__decorate([
    Input('cls-caption'),
    __metadata("design:type", String)
], FileInputComponent.prototype, "clsCaption", void 0);
__decorate([
    Input('cls-prepend'),
    __metadata("design:type", String)
], FileInputComponent.prototype, "clsPrepend", void 0);
__decorate([
    Input('cls-button'),
    __metadata("design:type", String)
], FileInputComponent.prototype, "clsButton", void 0);
__decorate([
    ViewChild('input', { static: true }),
    __metadata("design:type", ElementRef)
], FileInputComponent.prototype, "input", void 0);
FileInputComponent = FileInputComponent_1 = __decorate([
    Component({
        selector: 'm4-file-input',
        template: "<input type=\"file\" #input\r\n\r\n\r\n       [accept]=\"accept\"\r\n       [multiple]=\"multiple\"\r\n       [attr.data-prepend]=\"prepend\"\r\n       [attr.data-button-title]=\"buttonTitle\"\r\n       [attr.data-mode]=\"drop === true ? 'drop' : null\"\r\n\r\n       [attr.data-cls-component]=\"clsComponent\"\r\n       [attr.data-cls-caption]=\"clsCaption\"\r\n       [attr.data-cls-prepend]=\"clsPrepend\"\r\n       [attr.data-cls-button]=\"clsButton\">\r\n",
        providers: [DefaultValueAccessor.get(FileInputComponent_1), TypeAlias.get(FileInputComponent_1)],
        changeDetection: ChangeDetectionStrategy.OnPush,
        encapsulation: ViewEncapsulation.None,
        styles: [".drop-zone.primary{outline-color:#0366d6}.drop-zone.secondary{outline-color:#607d8b}.drop-zone.success{outline-color:#60a917}.drop-zone.alert{outline-color:#ce352c}.drop-zone.warning{outline-color:#ff9447}.drop-zone.yellow{outline-color:#ffe484}.drop-zone.info{outline-color:#5ebdec}.drop-zone.dark{outline-color:#505050}.drop-zone.light{outline-color:#f8f8f8}"]
    })
], FileInputComponent);
export { FileInputComponent };
//# sourceMappingURL=data:application/json;base64,