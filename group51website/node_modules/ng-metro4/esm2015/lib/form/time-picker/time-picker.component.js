var TimePickerComponent_1;
import { __decorate, __metadata } from "tslib";
import { ChangeDetectionStrategy, Component, ElementRef, Input, ViewChild, ViewEncapsulation } from '@angular/core';
import { DefaultValueAccessor } from '../../helper/default-value-accessor';
import { ControlBase } from '../control-base';
import * as moment from 'moment';
import { TypeAlias } from '../../helper/type-alias';
import { ObjectHelper } from '../../helper/object-helper';
let TimePickerComponent = TimePickerComponent_1 = class TimePickerComponent extends ControlBase {
    constructor() {
        super(...arguments);
        this.showLabels = true;
    }
    createControl() {
        return new Promise((complete) => {
            const originalElement = $(this.input.nativeElement);
            ObjectHelper.hide(originalElement);
            if (this.clonedElement) {
                this.clonedElement.parent().remove();
            }
            this.clonedElement = originalElement.clone();
            ObjectHelper.show(this.clonedElement);
            originalElement.parent().append(this.clonedElement);
            this.timePicker = this.clonedElement.timepicker().data('timepicker');
            this.clonedElement.parent().find('.time-wrapper').one('click', () => {
                this.touchCallback();
            });
            this.timePicker.options.onSet = (val, elem_val) => {
                this.changeValue(moment.duration(elem_val));
            };
            complete();
        });
    }
    disable(disabled) {
        if (disabled) {
            this.clonedElement.parent().addClass('disabled');
        }
        else {
            this.clonedElement.parent().removeClass('disabled');
        }
    }
    newValue() {
        if (!this.timePicker) {
            return;
        }
        this.timePicker.val(this.innerValue ? `${this.innerValue.hours()}:${this.innerValue.minutes()}:${this.innerValue.seconds()}` : '');
    }
    newClassValue(newClasses, oldClasses) {
        if (this.clonedElement) {
            const target = this.clonedElement.parent();
            oldClasses.forEach((cls) => {
                target.removeClass(cls);
            });
            newClasses.forEach((cls) => {
                target.addClass(cls);
            });
        }
    }
};
__decorate([
    Input('hours'),
    __metadata("design:type", Boolean)
], TimePickerComponent.prototype, "hours", void 0);
__decorate([
    Input('minutes'),
    __metadata("design:type", Boolean)
], TimePickerComponent.prototype, "minutes", void 0);
__decorate([
    Input('seconds'),
    __metadata("design:type", Boolean)
], TimePickerComponent.prototype, "seconds", void 0);
__decorate([
    Input('show-labels'),
    __metadata("design:type", Object)
], TimePickerComponent.prototype, "showLabels", void 0);
__decorate([
    Input('locale'),
    __metadata("design:type", String)
], TimePickerComponent.prototype, "locale", void 0);
__decorate([
    Input('distance'),
    __metadata("design:type", Number)
], TimePickerComponent.prototype, "distance", void 0);
__decorate([
    Input('cls-picker'),
    __metadata("design:type", String)
], TimePickerComponent.prototype, "clsPicker", void 0);
__decorate([
    Input('cls-part'),
    __metadata("design:type", String)
], TimePickerComponent.prototype, "clsPart", void 0);
__decorate([
    Input('cls-hours'),
    __metadata("design:type", String)
], TimePickerComponent.prototype, "clsHours", void 0);
__decorate([
    Input('cls-minutes'),
    __metadata("design:type", String)
], TimePickerComponent.prototype, "clsMinutes", void 0);
__decorate([
    Input('cls-seconds'),
    __metadata("design:type", String)
], TimePickerComponent.prototype, "clsSeconds", void 0);
__decorate([
    ViewChild('input', { static: true }),
    __metadata("design:type", ElementRef)
], TimePickerComponent.prototype, "input", void 0);
TimePickerComponent = TimePickerComponent_1 = __decorate([
    Component({
        selector: 'm4-time-picker',
        template: "<input type=\"text\" #input\r\n\r\n\r\n       [attr.data-hours]=\"hours\"\r\n       [attr.data-minutes]=\"minutes\"\r\n       [attr.data-seconds]=\"seconds\"\r\n       [attr.data-show-labels]=\"showLabels\"\r\n       [attr.data-locale]=\"locale\"\r\n       [attr.data-distance]=\"distance\"\r\n\r\n       [attr.data-cls-picker]=\"clsPicker\"\r\n       [attr.data-cls-part]=\"clsPart\"\r\n       [attr.data-cls-hours]=\"clsHours\"\r\n       [attr.data-cls-minutes]=\"clsMinutes\"\r\n       [attr.data-cls-seconds]=\"clsSeconds\">\r\n",
        providers: [DefaultValueAccessor.get(TimePickerComponent_1), TypeAlias.get(TimePickerComponent_1)],
        changeDetection: ChangeDetectionStrategy.OnPush,
        encapsulation: ViewEncapsulation.None,
        styles: [".time-picker.primary .time-wrapper{border-color:#0366d6}.time-picker.secondary .time-wrapper{border-color:#607d8b}.time-picker.success .time-wrapper{border-color:#60a917}.time-picker.alert .time-wrapper{border-color:#ce352c}.time-picker.warning .time-wrapper{border-color:#ff9447}.time-picker.yellow .time-wrapper{border-color:#ffe484}.time-picker.info .time-wrapper{border-color:#5ebdec}.time-picker.dark .time-wrapper{border-color:#505050}.time-picker.light .time-wrapper{border-color:#f8f8f8}"]
    })
], TimePickerComponent);
export { TimePickerComponent };
//# sourceMappingURL=data:application/json;base64,