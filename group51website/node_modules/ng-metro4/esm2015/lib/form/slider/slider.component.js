var SliderComponent_1;
import { __decorate, __metadata } from "tslib";
import { Component, ElementRef, Input, ViewChild, ViewEncapsulation } from '@angular/core';
import { ControlBase } from '../control-base';
import { DefaultValueAccessor } from '../../helper/default-value-accessor';
import { TypeAlias } from '../../helper/type-alias';
import { asapScheduler } from 'rxjs';
import { ObjectHelper } from '../../helper/object-helper';
let SliderComponent = SliderComponent_1 = class SliderComponent extends ControlBase {
    createControl() {
        return new Promise((complete) => {
            const originalElement = $(this.input.nativeElement);
            ObjectHelper.hide(originalElement);
            if (this.clonedElement) {
                this.clonedElement.parent().parent().find('.slider-min-max').remove();
                this.clonedElement.parent().remove();
            }
            this.clonedElement = originalElement.clone();
            ObjectHelper.show(this.clonedElement);
            originalElement.parent().append(this.clonedElement);
            this.slider = this.clonedElement.slider().data('slider');
            this.clonedElement.parent().find('button.marker').one('blur', () => {
                this.touchCallback();
            });
            this.clonedElement.on('change', () => {
                asapScheduler.schedule(() => {
                    this.changeValue(+this.clonedElement.val());
                });
            });
            complete();
        });
    }
    disable(disabled) {
        if (disabled) {
            this.clonedElement.parent().addClass('disabled');
        }
        else {
            this.clonedElement.parent().removeClass('disabled');
        }
    }
    newValue() {
        if (!this.slider) {
            return;
        }
        this.slider.val(this.innerValue);
    }
    newClassValue(newClasses, oldClasses) {
        if (this.clonedElement) {
            const target = this.clonedElement.parent();
            oldClasses.forEach((cls) => {
                target.removeClass(cls);
            });
            newClasses.forEach((cls) => {
                target.addClass(cls);
            });
        }
    }
};
__decorate([
    Input('min'),
    __metadata("design:type", Number)
], SliderComponent.prototype, "min", void 0);
__decorate([
    Input('max'),
    __metadata("design:type", Number)
], SliderComponent.prototype, "max", void 0);
__decorate([
    Input('show-min-max'),
    __metadata("design:type", Boolean)
], SliderComponent.prototype, "showMinMax", void 0);
__decorate([
    Input('accuracy'),
    __metadata("design:type", Number)
], SliderComponent.prototype, "accuracy", void 0);
__decorate([
    Input('buffer'),
    __metadata("design:type", Number)
], SliderComponent.prototype, "buffer", void 0);
__decorate([
    Input('hint'),
    __metadata("design:type", Boolean)
], SliderComponent.prototype, "hint", void 0);
__decorate([
    Input('hint-always'),
    __metadata("design:type", Boolean)
], SliderComponent.prototype, "hintAlways", void 0);
__decorate([
    Input('hint-position'),
    __metadata("design:type", String)
], SliderComponent.prototype, "hintPosition", void 0);
__decorate([
    Input('hint-mask'),
    __metadata("design:type", String)
], SliderComponent.prototype, "hintMask", void 0);
__decorate([
    Input('vertical'),
    __metadata("design:type", Boolean)
], SliderComponent.prototype, "vertical", void 0);
__decorate([
    Input('size'),
    __metadata("design:type", Number)
], SliderComponent.prototype, "size", void 0);
__decorate([
    Input('thin'),
    __metadata("design:type", String)
], SliderComponent.prototype, "thin", void 0);
__decorate([
    Input('cycle-marker'),
    __metadata("design:type", Boolean)
], SliderComponent.prototype, "cycleMarker", void 0);
__decorate([
    Input('cls-slider'),
    __metadata("design:type", String)
], SliderComponent.prototype, "clsSlider", void 0);
__decorate([
    Input('cls-backside'),
    __metadata("design:type", String)
], SliderComponent.prototype, "clsBackside", void 0);
__decorate([
    Input('cls-complete'),
    __metadata("design:type", String)
], SliderComponent.prototype, "clsComplete", void 0);
__decorate([
    Input('cls-buffer'),
    __metadata("design:type", String)
], SliderComponent.prototype, "clsBuffer", void 0);
__decorate([
    Input('cls-marker'),
    __metadata("design:type", String)
], SliderComponent.prototype, "clsMarker", void 0);
__decorate([
    Input('cls-hint'),
    __metadata("design:type", String)
], SliderComponent.prototype, "clsHint", void 0);
__decorate([
    Input('cls-min-max'),
    __metadata("design:type", String)
], SliderComponent.prototype, "clsMinMax", void 0);
__decorate([
    Input('cls-min'),
    __metadata("design:type", String)
], SliderComponent.prototype, "clsMin", void 0);
__decorate([
    Input('cls-max'),
    __metadata("design:type", String)
], SliderComponent.prototype, "clsMax", void 0);
__decorate([
    ViewChild('input', { static: true }),
    __metadata("design:type", ElementRef)
], SliderComponent.prototype, "input", void 0);
SliderComponent = SliderComponent_1 = __decorate([
    Component({
        selector: 'm4-slider',
        template: "<input type=\"number\" #input\r\n\r\n\r\n       [attr.data-min]=\"min\"\r\n       [attr.data-max]=\"max\"\r\n       [attr.data-show-min-max]=\"showMinMax\"\r\n       [attr.data-accuracy]=\"accuracy\"\r\n       [attr.data-buffer]=\"buffer\"\r\n       [attr.data-hint]=\"hint\"\r\n       [attr.data-hint-always]=\"hintAlways\"\r\n       [attr.data-hint-position]=\"hintPosition\"\r\n       [attr.data-hint-mask]=\"hintMask\"\r\n       [attr.data-vertical]=\"vertical\"\r\n       [attr.data-size]=\"size\"\r\n\r\n       [attr.data-cls-slider]=\"clsSlider\"\r\n       [attr.data-cls-backside]=\"clsBackside\"\r\n       [attr.data-cls-complete]=\"clsComplete\"\r\n       [attr.data-cls-buffer]=\"clsBuffer\"\r\n       [attr.data-cls-marker]=\"clsMarker\"\r\n       [attr.data-cls-hint]=\"clsHint\"\r\n       [attr.data-cls-min-max]=\"clsMinMax\"\r\n       [attr.data-cls-min]=\"clsMin\"\r\n       [attr.data-cls-max]=\"clsMax\"\r\n\r\n       [class.thin]=\"thin === 'thin'\"\r\n       [class.ultra-thin]=\"thin === 'ultra-thin'\"\r\n       [class.cycle-marker]=\"cycleMarker\">\r\n",
        providers: [DefaultValueAccessor.get(SliderComponent_1), TypeAlias.get(SliderComponent_1)],
        encapsulation: ViewEncapsulation.None,
        styles: [".slider.primary .complete{background-color:#0366d6}.slider.primary .backside{background-color:#3969a0}.slider.secondary .complete{background-color:#607d8b}.slider.secondary .backside{background-color:#767676}.slider.success .complete{background-color:#60a917}.slider.success .backside{background-color:#607947}.slider.alert .complete{background-color:#ce352c}.slider.alert .backside{background-color:#906d6b}.slider.warning .complete{background-color:#ff9447}.slider.warning .backside{background-color:#d19c75}.slider.yellow .complete{background-color:#ffe484}.slider.yellow .backside{background-color:#e0d3a3}.slider.info .complete{background-color:#5ebdec}.slider.info .backside{background-color:#8baebf}.slider.dark .backside,.slider.dark .complete{background-color:#505050}.slider.light .backside,.slider.light .complete{background-color:#f8f8f8}m4-slider .disabled .complete,m4-slider .disabled button.marker{background-color:#989898}"]
    })
], SliderComponent);
export { SliderComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2xpZGVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nLW1ldHJvNC8iLCJzb3VyY2VzIjpbImxpYi9mb3JtL3NsaWRlci9zbGlkZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxpQkFBaUIsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUN6RixPQUFPLEVBQUMsV0FBVyxFQUFDLE1BQU0saUJBQWlCLENBQUM7QUFDNUMsT0FBTyxFQUFDLG9CQUFvQixFQUFDLE1BQU0scUNBQXFDLENBQUM7QUFDekUsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLHlCQUF5QixDQUFDO0FBQ2xELE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFFbkMsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLDRCQUE0QixDQUFDO0FBV3hELElBQWEsZUFBZSx1QkFBNUIsTUFBYSxlQUFnQixTQUFRLFdBQW1CO0lBK0J0RCxhQUFhO1FBQ1gsT0FBTyxJQUFJLE9BQU8sQ0FBTyxDQUFDLFFBQVEsRUFBRSxFQUFFO1lBQ3BDLE1BQU0sZUFBZSxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBQ3BELFlBQVksQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7WUFFbkMsSUFBSSxJQUFJLENBQUMsYUFBYSxFQUFFO2dCQUN0QixJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDO2dCQUN0RSxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDO2FBQ3RDO1lBRUQsSUFBSSxDQUFDLGFBQWEsR0FBRyxlQUFlLENBQUMsS0FBSyxFQUFFLENBQUM7WUFD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c0I7QUFFdkI7SUFBcEIsS0FBSyxDQUFDLFlBQVksQ0FBQzs7a0RBQW1CO0FBQ2hCO0lBQXRCLEtBQUssQ0FBQyxjQUFjLENBQUM7O29EQUFxQjtBQUNwQjtJQUF0QixLQUFLLENBQUMsY0FBYyxDQUFDOztvREFBcUI7QUFDdEI7SUFBcEIsS0FBSyxDQUFDLFlBQVksQ0FBQzs7a0RBQW1CO0FBQ2xCO0lBQXBCLEtBQUssQ0FBQyxZQUFZLENBQUM7O2tEQUFtQjtBQUNwQjtJQUFsQixLQUFLLENBQUMsVUFBVSxDQUFDOztnREFBaUI7QUFDYjtJQUFyQixLQUFLLENBQUMsYUFBYSxDQUFDOztrREFBbUI7QUFDdEI7SUFBakIsS0FBSyxDQUFDLFNBQVMsQ0FBQzs7K0NBQWdCO0FBQ2Y7SUFBakIsS0FBSyxDQUFDLFNBQVMsQ0FBQzs7K0NBQWdCO0FBRUs7SUFBckMsU0FBUyxDQUFDLE9BQU8sRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsQ0FBQzs4QkFBZ0IsVUFBVTs4Q0FBQztBQTNCckQsZUFBZTtJQVAzQixTQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUsV0FBVztRQUNyQixna0NBQXNDO1FBRXRDLFNBQVMsRUFBRSxDQUFDLG9CQUFvQixDQUFDLEdBQUcsQ0FBQyxpQkFBZSxDQUFDLEVBQUUsU0FBUyxDQUFDLEdBQUcsQ0FBQyxpQkFBZSxDQUFDLENBQUM7UUFDdEYsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUk7O0tBQ3RDLENBQUM7R0FDVyxlQUFlLENBMkYzQjtTQTNGWSxlQUFlIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb21wb25lbnQsIEVsZW1lbnRSZWYsIElucHV0LCBWaWV3Q2hpbGQsIFZpZXdFbmNhcHN1bGF0aW9ufSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHtDb250cm9sQmFzZX0gZnJvbSAnLi4vY29udHJvbC1iYXNlJztcclxuaW1wb3J0IHtEZWZhdWx0VmFsdWVBY2Nlc3Nvcn0gZnJvbSAnLi4vLi4vaGVscGVyL2RlZmF1bHQtdmFsdWUtYWNjZXNzb3InO1xyXG5pbXBvcnQge1R5cGVBbGlhc30gZnJvbSAnLi4vLi4vaGVscGVyL3R5cGUtYWxpYXMnO1xyXG5pbXBvcnQge2FzYXBTY2hlZHVsZXJ9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQge1Bvc2l0aW9uQmFzZVR5cGUsIFRoaW5UeXBlfSBmcm9tICcuLi8uLi9oZWxwZXIvdHlwZXMnO1xyXG5pbXBvcnQge09iamVjdEhlbHBlcn0gZnJvbSAnLi4vLi4vaGVscGVyL29iamVjdC1oZWxwZXInO1xyXG5cclxuZGVjbGFyZSB2YXIgJDogYW55O1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdtNC1zbGlkZXInLFxyXG4gIHRlbXBsYXRlVXJsOiAnLi9zbGlkZXIuY29tcG9uZW50Lmh0bWwnLFxyXG4gIHN0eWxlVXJsczogWycuL3NsaWRlci5jb21wb25lbnQubGVzcyddLFxyXG4gIHByb3ZpZGVyczogW0RlZmF1bHRWYWx1ZUFjY2Vzc29yLmdldChTbGlkZXJDb21wb25lbnQpLCBUeXBlQWxpYXMuZ2V0KFNsaWRlckNvbXBvbmVudCldLFxyXG4gIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmVcclxufSlcclxuZXhwb3J0IGNsYXNzIFNsaWRlckNvbXBvbmVudCBleHRlbmRzIENvbnRyb2xCYXNlPG51bWJlcj4ge1xyXG5cclxuICBASW5wdXQoJ21pbicpIG1pbjogbnVtYmVyO1xyXG4gIEBJbnB1dCgnbWF4JykgbWF4OiBudW1iZXI7XHJcbiAgQElucHV0KCdzaG93LW1pbi1tYXgnKSBzaG93TWluTWF4OiBib29sZWFuO1xyXG4gIEBJbnB1dCgnYWNjdXJhY3knKSBhY2N1cmFjeTogbnVtYmVyO1xyXG4gIEBJbnB1dCgnYnVmZmVyJykgYnVmZmVyOiBudW1iZXI7XHJcbiAgQElucHV0KCdoaW50JykgaGludDogYm9vbGVhbjtcclxuICBASW5wdXQoJ2hpbnQtYWx3YXlzJykgaGludEFsd2F5czogYm9vbGVhbjtcclxuICBASW5wdXQoJ2hpbnQtcG9zaXRpb24nKSBoaW50UG9zaXRpb246IFBvc2l0aW9uQmFzZVR5cGU7XHJcbiAgQElucHV0KCdoaW50LW1hc2snKSBoaW50TWFzazogc3RyaW5nO1xyXG4gIEBJbnB1dCgndmVydGljYWwnKSB2ZXJ0aWNhbDogYm9vbGVhbjtcclxuICBASW5wdXQoJ3NpemUnKSBzaXplOiBudW1iZXI7XHJcblxyXG4gIEBJbnB1dCgndGhpbicpIHRoaW46IFRoaW5UeXBlO1xyXG4gIEBJbnB1dCgnY3ljbGUtbWFya2VyJykgY3ljbGVNYXJrZXI6IGJvb2xlYW47XHJcblxyXG4gIEBJbnB1dCgnY2xzLXNsaWRlcicpIGNsc1NsaWRlcjogc3RyaW5nO1xyXG4gIEBJbnB1dCgnY2xzLWJhY2tzaWRlJykgY2xzQmFja3NpZGU6IHN0cmluZztcclxuICBASW5wdXQoJ2Nscy1jb21wbGV0ZScpIGNsc0NvbXBsZXRlOiBzdHJpbmc7XHJcbiAgQElucHV0KCdjbHMtYnVmZmVyJykgY2xzQnVmZmVyOiBzdHJpbmc7XHJcbiAgQElucHV0KCdjbHMtbWFya2VyJykgY2xzTWFya2VyOiBzdHJpbmc7XHJcbiAgQElucHV0KCdjbHMtaGludCcpIGNsc0hpbnQ6IHN0cmluZztcclxuICBASW5wdXQoJ2Nscy1taW4tbWF4JykgY2xzTWluTWF4OiBzdHJpbmc7XHJcbiAgQElucHV0KCdjbHMtbWluJykgY2xzTWluOiBzdHJpbmc7XHJcbiAgQElucHV0KCdjbHMtbWF4JykgY2xzTWF4OiBzdHJpbmc7XHJcblxyXG4gIEBWaWV3Q2hpbGQoJ2lucHV0JywgeyBzdGF0aWM6IHRydWUgfSkgcHJpdmF0ZSBpbnB1dDogRWxlbWVudFJlZjtcclxuICBwcml2YXRlIHNsaWRlcjogYW55O1xyXG4gIHByaXZhdGUgY2xvbmVkRWxlbWVudDogYW55O1xyXG5cclxuICBjcmVhdGVDb250cm9sKCkge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlPHZvaWQ+KChjb21wbGV0ZSkgPT4ge1xyXG4gICAgICBjb25zdCBvcmlnaW5hbEVsZW1lbnQgPSAkKHRoaXMuaW5wdXQubmF0aXZlRWxlbWVudCk7XHJcbiAgICAgIE9iamVjdEhlbHBlci5oaWRlKG9yaWdpbmFsRWxlbWVudCk7XHJcblxyXG4gICAgICBpZiAodGhpcy5jbG9uZWRFbGVtZW50KSB7XHJcbiAgICAgICAgdGhpcy5jbG9uZWRFbGVtZW50LnBhcmVudCgpLnBhcmVudCgpLmZpbmQoJy5zbGlkZXItbWluLW1heCcpLnJlbW92ZSgpO1xyXG4gICAgICAgIHRoaXMuY2xvbmVkRWxlbWVudC5wYXJlbnQoKS5yZW1vdmUoKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgdGhpcy5jbG9uZWRFbGVtZW50ID0gb3JpZ2luYWxFbGVtZW50LmNsb25lKCk7XHJcbiAgICAgIE9iamVjdEhlbHBlci5zaG93KHRoaXMuY2xvbmVkRWxlbWVudCk7XHJcbiAgICAgIG9yaWdpbmFsRWxlbWVudC5wYXJlbnQoKS5hcHBlbmQodGhpcy5jbG9uZWRFbGVtZW50KTtcclxuXHJcbiAgICAgIHRoaXMuc2xpZGVyID0gdGhpcy5jbG9uZWRFbGVtZW50LnNsaWRlcigpLmRhdGEoJ3NsaWRlcicpO1xyXG5cclxuICAgICAgdGhpcy5jbG9uZWRFbGVtZW50LnBhcmVudCgpLmZpbmQoJ2J1dHRvbi5tYXJrZXInKS5vbmUoJ2JsdXInLCAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy50b3VjaENhbGxiYWNrKCk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgdGhpcy5jbG9uZWRFbGVtZW50Lm9uKCdjaGFuZ2UnLCAoKSA9PiB7XHJcbiAgICAgICAgYXNhcFNjaGVkdWxlci5zY2hlZHVsZSgoKSA9PiB7XHJcbiAgICAgICAgICB0aGlzLmNoYW5nZVZhbHVlKCt0aGlzLmNsb25lZEVsZW1lbnQudmFsKCkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIGNvbXBsZXRlKCk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGRpc2FibGUoZGlzYWJsZWQ6IGJvb2xlYW4pOiB2b2lkIHtcclxuICAgIGlmIChkaXNhYmxlZCkge1xyXG4gICAgICB0aGlzLmNsb25lZEVsZW1lbnQucGFyZW50KCkuYWRkQ2xhc3MoJ2Rpc2FibGVkJyk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLmNsb25lZEVsZW1lbnQucGFyZW50KCkucmVtb3ZlQ2xhc3MoJ2Rpc2FibGVkJyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBuZXdWYWx1ZSgpOiB2b2lkIHtcclxuICAgIGlmICghdGhpcy5zbGlkZXIpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuc2xpZGVyLnZhbCh0aGlzLmlubmVyVmFsdWUpO1xyXG4gIH1cclxuXHJcbiAgbmV3Q2xhc3NWYWx1ZShuZXdDbGFzc2VzOiBzdHJpbmdbXSwgb2xkQ2xhc3Nlczogc3RyaW5nW10pIHtcclxuICAgIGlmICh0aGlzLmNsb25lZEVsZW1lbnQpIHtcclxuICAgICAgY29uc3QgdGFyZ2V0ID0gdGhpcy5jbG9uZWRFbGVtZW50LnBhcmVudCgpO1xyXG5cclxuICAgICAgb2xkQ2xhc3Nlcy5mb3JFYWNoKChjbHM6IHN0cmluZykgPT4ge1xyXG4gICAgICAgIHRhcmdldC5yZW1vdmVDbGFzcyhjbHMpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIG5ld0NsYXNzZXMuZm9yRWFjaCgoY2xzOiBzdHJpbmcpID0+IHtcclxuICAgICAgICB0YXJnZXQuYWRkQ2xhc3MoY2xzKTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxufVxyXG4iXX0=