import { __decorate } from "tslib";
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import 'metro4';
import { TagInputComponent } from './tag-input/tag-input.component';
import { SelectComponent } from './select/select.component';
import { InputComponent } from './input/input.component';
import { MaterialInputComponent } from './material-input/material-input.component';
import { TextareaComponent } from './textarea/textarea.component';
import { CheckboxComponent } from './checkbox/checkbox.component';
import { RadioComponent } from './radio/radio.component';
import { RadioGroupComponent } from './radio-group/radio-group.component';
import { SwitchComponent } from './switch/switch.component';
import { FileInputComponent } from './file-input/file-input.component';
import { KeypadComponent } from './keypad/keypad.component';
import { SliderComponent } from './slider/slider.component';
import { SpinnerComponent } from './spinner/spinner.component';
import { RatingComponent } from './rating/rating.component';
import { CalendarPickerComponent } from './calendar-picker/calendar-picker.component';
import { CalendarComponent } from './calendar/calendar.component';
import { DatePickerComponent } from './date-picker/date-picker.component';
import { TimePickerComponent } from './time-picker/time-picker.component';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { CheckboxGroupComponent } from './checkbox-group/checkbox-group.component';
import { IsArrayPipe } from './pipes/is-array.pipe';
import { FormControlWrapperComponent } from './form-control-wrapper/form-control-wrapper.component';
import { ErrorDisplayPipe } from './pipes/error-display.pipe';
import { FormWrapperComponent } from './form-wrapper/form-wrapper.component';
import { FormBuilderComponent } from './form-builder/form-builder.component';
import { DynamicFormControlComponent } from './dynamic-form-control/dynamic-form-control.component';
import { UnwrapObservableOrValuePipe } from './pipes/unwrap-observable-or-value.pipe';
import { ExecuteFunctionOncePipe } from './pipes/execute-function-once.pipe';
import { TrustHtmlPipe } from './pipes/trust-html.pipe';
import { ObjectKeysPipe } from './pipes/object-keys.pipe';
import { CreateHashPipe } from './pipes/create-hash.pipe';
const declarations = [
    TagInputComponent,
    SelectComponent,
    InputComponent,
    MaterialInputComponent,
    TextareaComponent,
    CheckboxComponent,
    CheckboxGroupComponent,
    RadioComponent,
    RadioGroupComponent,
    SwitchComponent,
    FileInputComponent,
    KeypadComponent,
    SliderComponent,
    SpinnerComponent,
    RatingComponent,
    CalendarPickerComponent,
    CalendarComponent,
    DatePickerComponent,
    TimePickerComponent,
    FormControlWrapperComponent,
    FormWrapperComponent,
    FormBuilderComponent,
    DynamicFormControlComponent,
];
let NgMetro4FormsModule = class NgMetro4FormsModule {
};
NgMetro4FormsModule = __decorate([
    NgModule({
        imports: [
            CommonModule,
            FormsModule,
            ReactiveFormsModule
        ],
        declarations: [
            IsArrayPipe,
            ErrorDisplayPipe,
            UnwrapObservableOrValuePipe,
            ExecuteFunctionOncePipe,
            TrustHtmlPipe,
            ObjectKeysPipe,
            ...declarations,
            CreateHashPipe,
        ],
        exports: [
            ...declarations,
            CommonModule,
            FormsModule,
            ReactiveFormsModule
        ]
    })
], NgMetro4FormsModule);
export { NgMetro4FormsModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctbWV0cm80LWZvcm1zLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nLW1ldHJvNC8iLCJzb3VyY2VzIjpbImxpYi9mb3JtL25nLW1ldHJvNC1mb3Jtcy5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBQyxRQUFRLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDdkMsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBQzdDLE9BQU8sUUFBUSxDQUFDO0FBRWhCLE9BQU8sRUFBQyxpQkFBaUIsRUFBQyxNQUFNLGlDQUFpQyxDQUFDO0FBQ2xFLE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSwyQkFBMkIsQ0FBQztBQUMxRCxPQUFPLEVBQUMsY0FBYyxFQUFDLE1BQU0seUJBQXlCLENBQUM7QUFDdkQsT0FBTyxFQUFDLHNCQUFzQixFQUFDLE1BQU0sMkNBQTJDLENBQUM7QUFDakYsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0sK0JBQStCLENBQUM7QUFDaEUsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0sK0JBQStCLENBQUM7QUFDaEUsT0FBTyxFQUFDLGNBQWMsRUFBQyxNQUFNLHlCQUF5QixDQUFDO0FBQ3ZELE9BQU8sRUFBQyxtQkFBbUIsRUFBQyxNQUFNLHFDQUFxQyxDQUFDO0FBQ3hFLE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSwyQkFBMkIsQ0FBQztBQUMxRCxPQUFPLEVBQUMsa0JBQWtCLEVBQUMsTUFBTSxtQ0FBbUMsQ0FBQztBQUNyRSxPQUFPLEVBQUMsZUFBZSxFQUFDLE1BQU0sMkJBQTJCLENBQUM7QUFDMUQsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLDJCQUEyQixDQUFDO0FBQzFELE9BQU8sRUFBQyxnQkFBZ0IsRUFBQyxNQUFNLDZCQUE2QixDQUFDO0FBQzdELE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSwyQkFBMkIsQ0FBQztBQUMxRCxPQUFPLEVBQUMsdUJBQXVCLEVBQUMsTUFBTSw2Q0FBNkMsQ0FBQztBQUNwRixPQUFPLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSwrQkFBK0IsQ0FBQztBQUNoRSxPQUFPLEVBQUMsbUJBQW1CLEVBQUMsTUFBTSxxQ0FBcUMsQ0FBQztBQUN4RSxPQUFPLEVBQUMsbUJBQW1CLEVBQUMsTUFBTSxxQ0FBcUMsQ0FBQztBQUN4RSxPQUFPLEVBQUMsV0FBVyxFQUFFLG1CQUFtQixFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDaEUsT0FBTyxFQUFDLHNCQUFzQixFQUFDLE1BQU0sMkNBQTJDLENBQUM7QUFDakYsT0FBTyxFQUFDLFdBQVcsRUFBQyxNQUFNLHVCQUF1QixDQUFDO0FBQ2xELE9BQU8sRUFBQywyQkFBMkIsRUFBQyxNQUFNLHVEQUF1RCxDQUFDO0FBQ2xHLE9BQU8sRUFBQyxnQkFBZ0IsRUFBQyxNQUFNLDRCQUE0QixDQUFDO0FBQzVELE9BQU8sRUFBQyxvQkFBb0IsRUFBQyxNQUFNLHVDQUF1QyxDQUFDO0FBQzNFLE9BQU8sRUFBQyxvQkFBb0IsRUFBQyxNQUFNLHVDQUF1QyxDQUFDO0FBQzNFLE9BQU8sRUFBQywyQkFBMkIsRUFBQyxNQUFNLHVEQUF1RCxDQUFDO0FBQ2xHLE9BQU8sRUFBQywyQkFBMkIsRUFBQyxNQUFNLHlDQUF5QyxDQUFDO0FBQ3BGLE9BQU8sRUFBQyx1QkFBdUIsRUFBQyxNQUFNLG9DQUFvQyxDQUFDO0FBQzNFLE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSx5QkFBeUIsQ0FBQztBQUN0RCxPQUFPLEVBQUMsY0FBYyxFQUFDLE1BQU0sMEJBQTBCLENBQUM7QUFDeEQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBRTFELE1BQU0sWUFBWSxHQUFHO0lBQ25CLGlCQUFpQjtJQUNqQixlQUFlO0lBQ2YsY0FBYztJQUNkLHNCQUFzQjtJQUN0QixpQkFBaUI7SUFDakIsaUJBQWlCO0lBQ2pCLHNCQUFzQjtJQUN0QixjQUFjO0lBQ2QsbUJBQW1CO0lBQ25CLGVBQWU7SUFDZixrQkFBa0I7SUFDbEIsZUFBZTtJQUNmLGVBQWU7SUFDZixnQkFBZ0I7SUFDaEIsZUFBZTtJQUNmLHVCQUF1QjtJQUN2QixpQkFBaUI7SUFDakIsbUJBQW1CO0lBQ25CLG1CQUFtQjtJQUNuQiwyQkFBMkI7SUFDM0Isb0JBQW9CO0lBQ3BCLG9CQUFvQjtJQUNwQiwyQkFBMkI7Q0FDNUIsQ0FBQztBQXlCRixJQUFhLG1CQUFtQixHQUFoQyxNQUFhLG1CQUFtQjtDQUFJLENBQUE7QUFBdkIsbUJBQW1CO0lBdkIvQixRQUFRLENBQUM7UUFDUixPQUFPLEVBQUU7WUFDUCxZQUFZO1lBQ1osV0FBVztZQUNYLG1CQUFtQjtTQUNwQjtRQUNELFlBQVksRUFBRTtZQUNaLFdBQVc7WUFDWCxnQkFBZ0I7WUFDaEIsMkJBQTJCO1lBQzNCLHVCQUF1QjtZQUN2QixhQUFhO1lBQ2IsY0FBYztZQUNkLEdBQUcsWUFBWTtZQUNmLGNBQWM7U0FDZjtRQUNELE9BQU8sRUFBRTtZQUNQLEdBQUcsWUFBWTtZQUNmLFlBQVk7WUFDWixXQUFXO1lBQ1gsbUJBQW1CO1NBQ3BCO0tBQ0YsQ0FBQztHQUNXLG1CQUFtQixDQUFJO1NBQXZCLG1CQUFtQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7TmdNb2R1bGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge0NvbW1vbk1vZHVsZX0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcclxuaW1wb3J0ICdtZXRybzQnO1xyXG5cclxuaW1wb3J0IHtUYWdJbnB1dENvbXBvbmVudH0gZnJvbSAnLi90YWctaW5wdXQvdGFnLWlucHV0LmNvbXBvbmVudCc7XHJcbmltcG9ydCB7U2VsZWN0Q29tcG9uZW50fSBmcm9tICcuL3NlbGVjdC9zZWxlY3QuY29tcG9uZW50JztcclxuaW1wb3J0IHtJbnB1dENvbXBvbmVudH0gZnJvbSAnLi9pbnB1dC9pbnB1dC5jb21wb25lbnQnO1xyXG5pbXBvcnQge01hdGVyaWFsSW5wdXRDb21wb25lbnR9IGZyb20gJy4vbWF0ZXJpYWwtaW5wdXQvbWF0ZXJpYWwtaW5wdXQuY29tcG9uZW50JztcclxuaW1wb3J0IHtUZXh0YXJlYUNvbXBvbmVudH0gZnJvbSAnLi90ZXh0YXJlYS90ZXh0YXJlYS5jb21wb25lbnQnO1xyXG5pbXBvcnQge0NoZWNrYm94Q29tcG9uZW50fSBmcm9tICcuL2NoZWNrYm94L2NoZWNrYm94LmNvbXBvbmVudCc7XHJcbmltcG9ydCB7UmFkaW9Db21wb25lbnR9IGZyb20gJy4vcmFkaW8vcmFkaW8uY29tcG9uZW50JztcclxuaW1wb3J0IHtSYWRpb0dyb3VwQ29tcG9uZW50fSBmcm9tICcuL3JhZGlvLWdyb3VwL3JhZGlvLWdyb3VwLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7U3dpdGNoQ29tcG9uZW50fSBmcm9tICcuL3N3aXRjaC9zd2l0Y2guY29tcG9uZW50JztcclxuaW1wb3J0IHtGaWxlSW5wdXRDb21wb25lbnR9IGZyb20gJy4vZmlsZS1pbnB1dC9maWxlLWlucHV0LmNvbXBvbmVudCc7XHJcbmltcG9ydCB7S2V5cGFkQ29tcG9uZW50fSBmcm9tICcuL2tleXBhZC9rZXlwYWQuY29tcG9uZW50JztcclxuaW1wb3J0IHtTbGlkZXJDb21wb25lbnR9IGZyb20gJy4vc2xpZGVyL3NsaWRlci5jb21wb25lbnQnO1xyXG5pbXBvcnQge1NwaW5uZXJDb21wb25lbnR9IGZyb20gJy4vc3Bpbm5lci9zcGlubmVyLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7UmF0aW5nQ29tcG9uZW50fSBmcm9tICcuL3JhdGluZy9yYXRpbmcuY29tcG9uZW50JztcclxuaW1wb3J0IHtDYWxlbmRhclBpY2tlckNvbXBvbmVudH0gZnJvbSAnLi9jYWxlbmRhci1waWNrZXIvY2FsZW5kYXItcGlja2VyLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7Q2FsZW5kYXJDb21wb25lbnR9IGZyb20gJy4vY2FsZW5kYXIvY2FsZW5kYXIuY29tcG9uZW50JztcclxuaW1wb3J0IHtEYXRlUGlja2VyQ29tcG9uZW50fSBmcm9tICcuL2RhdGUtcGlja2VyL2RhdGUtcGlja2VyLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7VGltZVBpY2tlckNvbXBvbmVudH0gZnJvbSAnLi90aW1lLXBpY2tlci90aW1lLXBpY2tlci5jb21wb25lbnQnO1xyXG5pbXBvcnQge0Zvcm1zTW9kdWxlLCBSZWFjdGl2ZUZvcm1zTW9kdWxlfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XHJcbmltcG9ydCB7Q2hlY2tib3hHcm91cENvbXBvbmVudH0gZnJvbSAnLi9jaGVja2JveC1ncm91cC9jaGVja2JveC1ncm91cC5jb21wb25lbnQnO1xyXG5pbXBvcnQge0lzQXJyYXlQaXBlfSBmcm9tICcuL3BpcGVzL2lzLWFycmF5LnBpcGUnO1xyXG5pbXBvcnQge0Zvcm1Db250cm9sV3JhcHBlckNvbXBvbmVudH0gZnJvbSAnLi9mb3JtLWNvbnRyb2wtd3JhcHBlci9mb3JtLWNvbnRyb2wtd3JhcHBlci5jb21wb25lbnQnO1xyXG5pbXBvcnQge0Vycm9yRGlzcGxheVBpcGV9IGZyb20gJy4vcGlwZXMvZXJyb3ItZGlzcGxheS5waXBlJztcclxuaW1wb3J0IHtGb3JtV3JhcHBlckNvbXBvbmVudH0gZnJvbSAnLi9mb3JtLXdyYXBwZXIvZm9ybS13cmFwcGVyLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7Rm9ybUJ1aWxkZXJDb21wb25lbnR9IGZyb20gJy4vZm9ybS1idWlsZGVyL2Zvcm0tYnVpbGRlci5jb21wb25lbnQnO1xyXG5pbXBvcnQge0R5bmFtaWNGb3JtQ29udHJvbENvbXBvbmVudH0gZnJvbSAnLi9keW5hbWljLWZvcm0tY29udHJvbC9keW5hbWljLWZvcm0tY29udHJvbC5jb21wb25lbnQnO1xyXG5pbXBvcnQge1Vud3JhcE9ic2VydmFibGVPclZhbHVlUGlwZX0gZnJvbSAnLi9waXBlcy91bndyYXAtb2JzZXJ2YWJsZS1vci12YWx1ZS5waXBlJztcclxuaW1wb3J0IHtFeGVjdXRlRnVuY3Rpb25PbmNlUGlwZX0gZnJvbSAnLi9waXBlcy9leGVjdXRlLWZ1bmN0aW9uLW9uY2UucGlwZSc7XHJcbmltcG9ydCB7VHJ1c3RIdG1sUGlwZX0gZnJvbSAnLi9waXBlcy90cnVzdC1odG1sLnBpcGUnO1xyXG5pbXBvcnQge09iamVjdEtleXNQaXBlfSBmcm9tICcuL3BpcGVzL29iamVjdC1rZXlzLnBpcGUnO1xyXG5pbXBvcnQgeyBDcmVhdGVIYXNoUGlwZSB9IGZyb20gJy4vcGlwZXMvY3JlYXRlLWhhc2gucGlwZSc7XHJcblxyXG5jb25zdCBkZWNsYXJhdGlvbnMgPSBbXHJcbiAgVGFnSW5wdXRDb21wb25lbnQsXHJcbiAgU2VsZWN0Q29tcG9uZW50LFxyXG4gIElucHV0Q29tcG9uZW50LFxyXG4gIE1hdGVyaWFsSW5wdXRDb21wb25lbnQsXHJcbiAgVGV4dGFyZWFDb21wb25lbnQsXHJcbiAgQ2hlY2tib3hDb21wb25lbnQsXHJcbiAgQ2hlY2tib3hHcm91cENvbXBvbmVudCxcclxuICBSYWRpb0NvbXBvbmVudCxcclxuICBSYWRpb0dyb3VwQ29tcG9uZW50LFxyXG4gIFN3aXRjaENvbXBvbmVudCxcclxuICBGaWxlSW5wdXRDb21wb25lbnQsXHJcbiAgS2V5cGFkQ29tcG9uZW50LFxyXG4gIFNsaWRlckNvbXBvbmVudCxcclxuICBTcGlubmVyQ29tcG9uZW50LFxyXG4gIFJhdGluZ0NvbXBvbmVudCxcclxuICBDYWxlbmRhclBpY2tlckNvbXBvbmVudCxcclxuICBDYWxlbmRhckNvbXBvbmVudCxcclxuICBEYXRlUGlja2VyQ29tcG9uZW50LFxyXG4gIFRpbWVQaWNrZXJDb21wb25lbnQsXHJcbiAgRm9ybUNvbnRyb2xXcmFwcGVyQ29tcG9uZW50LFxyXG4gIEZvcm1XcmFwcGVyQ29tcG9uZW50LFxyXG4gIEZvcm1CdWlsZGVyQ29tcG9uZW50LFxyXG4gIER5bmFtaWNGb3JtQ29udHJvbENvbXBvbmVudCxcclxuXTtcclxuXHJcbkBOZ01vZHVsZSh7XHJcbiAgaW1wb3J0czogW1xyXG4gICAgQ29tbW9uTW9kdWxlLFxyXG4gICAgRm9ybXNNb2R1bGUsXHJcbiAgICBSZWFjdGl2ZUZvcm1zTW9kdWxlXHJcbiAgXSxcclxuICBkZWNsYXJhdGlvbnM6IFtcclxuICAgIElzQXJyYXlQaXBlLFxyXG4gICAgRXJyb3JEaXNwbGF5UGlwZSxcclxuICAgIFVud3JhcE9ic2VydmFibGVPclZhbHVlUGlwZSxcclxuICAgIEV4ZWN1dGVGdW5jdGlvbk9uY2VQaXBlLFxyXG4gICAgVHJ1c3RIdG1sUGlwZSxcclxuICAgIE9iamVjdEtleXNQaXBlLFxyXG4gICAgLi4uZGVjbGFyYXRpb25zLFxyXG4gICAgQ3JlYXRlSGFzaFBpcGUsXHJcbiAgXSxcclxuICBleHBvcnRzOiBbXHJcbiAgICAuLi5kZWNsYXJhdGlvbnMsXHJcbiAgICBDb21tb25Nb2R1bGUsXHJcbiAgICBGb3Jtc01vZHVsZSxcclxuICAgIFJlYWN0aXZlRm9ybXNNb2R1bGVcclxuICBdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBOZ01ldHJvNEZvcm1zTW9kdWxlIHsgfVxyXG4iXX0=