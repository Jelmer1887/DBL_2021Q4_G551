var CheckboxComponent_1;
import { __decorate, __metadata } from "tslib";
import { ChangeDetectionStrategy, Component, ElementRef, Input, ViewChild, ViewEncapsulation } from '@angular/core';
import { ControlBase } from '../control-base';
import { DefaultValueAccessor } from '../../helper/default-value-accessor';
import { TypeAlias } from '../../helper/type-alias';
import { ObjectHelper } from '../../helper/object-helper';
let CheckboxComponent = CheckboxComponent_1 = class CheckboxComponent extends ControlBase {
    constructor() {
        super(...arguments);
        this.readonly = false;
    }
    createControl() {
        return new Promise((complete) => {
            const originalElement = $(this.input.nativeElement);
            ObjectHelper.hide(originalElement);
            if (this.clonedElement) {
                this.clonedElement.parent().remove();
            }
            this.clonedElement = originalElement.clone();
            ObjectHelper.show(this.clonedElement);
            originalElement.parent().append(this.clonedElement);
            this.checkbox = this.clonedElement.checkbox().data('checkbox');
            this.clonedElement.one('blur', () => {
                this.touchCallback();
            });
            this.clonedElement.on('change', () => {
                this.changeValue(this.clonedElement.prop('checked'));
            });
            complete();
        });
    }
    disable(disabled) {
        if (disabled) {
            this.clonedElement.attr('disabled', 'disabled');
            this.checkbox.disable();
        }
        else {
            this.clonedElement.removeAttr('disabled');
            this.checkbox.enable();
        }
    }
    newValue() {
        if (!this.checkbox) {
            return;
        }
        this.clonedElement.prop('checked', this.innerValue);
    }
    newClassValue(newClasses, oldClasses) {
        if (this.clonedElement) {
            const target = this.clonedElement.parent();
            oldClasses.forEach((cls) => {
                target.removeClass(cls);
            });
            newClasses.forEach((cls) => {
                target.addClass(cls);
            });
        }
    }
};
__decorate([
    Input('value'),
    __metadata("design:type", Object)
], CheckboxComponent.prototype, "value", void 0);
__decorate([
    Input('readonly'),
    __metadata("design:type", Object)
], CheckboxComponent.prototype, "readonly", void 0);
__decorate([
    Input('style'),
    __metadata("design:type", Number)
], CheckboxComponent.prototype, "style", void 0);
__decorate([
    Input('caption'),
    __metadata("design:type", String)
], CheckboxComponent.prototype, "caption", void 0);
__decorate([
    Input('caption-position'),
    __metadata("design:type", String)
], CheckboxComponent.prototype, "captionPosition", void 0);
__decorate([
    Input('indeterminate'),
    __metadata("design:type", Boolean)
], CheckboxComponent.prototype, "indeterminate", void 0);
__decorate([
    Input('cls-checkbox'),
    __metadata("design:type", String)
], CheckboxComponent.prototype, "clsCheckbox", void 0);
__decorate([
    Input('cls-caption'),
    __metadata("design:type", String)
], CheckboxComponent.prototype, "clsCaption", void 0);
__decorate([
    Input('cls-check'),
    __metadata("design:type", String)
], CheckboxComponent.prototype, "clsCheck", void 0);
__decorate([
    ViewChild('input', { static: true }),
    __metadata("design:type", ElementRef)
], CheckboxComponent.prototype, "input", void 0);
CheckboxComponent = CheckboxComponent_1 = __decorate([
    Component({
        selector: 'm4-checkbox',
        template: "<input type=\"checkbox\" #input\r\n\r\n\r\n       [readonly]=\"readonly\"\r\n\r\n       [attr.data-style]=\"style\"\r\n       [attr.data-caption]=\"caption\"\r\n       [attr.data-caption-position]=\"captionPosition\"\r\n       [attr.data-indeterminate]=\"indeterminate\"\r\n       [attr.data-cls-radio]=\"clsCheckbox\"\r\n       [attr.data-cls-caption]=\"clsCaption\"\r\n       [attr.data-cls-check]=\"clsCheck\">\r\n",
        providers: [DefaultValueAccessor.get(CheckboxComponent_1), TypeAlias.get(CheckboxComponent_1)],
        changeDetection: ChangeDetectionStrategy.OnPush,
        encapsulation: ViewEncapsulation.None,
        styles: [".checkbox.primary input[data-indeterminate=true]~.check,.checkbox.primary input[type=checkbox]:checked~.check{background-color:#0366d6;border-color:#0366d6}.checkbox.primary .check{border-color:#0366d6}.checkbox.secondary input[data-indeterminate=true]~.check,.checkbox.secondary input[type=checkbox]:checked~.check{background-color:#607d8b;border-color:#607d8b}.checkbox.secondary .check{border-color:#607d8b}.checkbox.success input[data-indeterminate=true]~.check,.checkbox.success input[type=checkbox]:checked~.check{background-color:#60a917;border-color:#60a917}.checkbox.success .check{border-color:#60a917}.checkbox.alert input[data-indeterminate=true]~.check,.checkbox.alert input[type=checkbox]:checked~.check{background-color:#ce352c;border-color:#ce352c}.checkbox.alert .check{border-color:#ce352c}.checkbox.warning input[data-indeterminate=true]~.check,.checkbox.warning input[type=checkbox]:checked~.check{background-color:#ff9447;border-color:#ff9447}.checkbox.warning .check{border-color:#ff9447}.checkbox.yellow input[data-indeterminate=true]~.check,.checkbox.yellow input[type=checkbox]:checked~.check{background-color:#ffe484;border-color:#ffe484}.checkbox.yellow .check{border-color:#ffe484}.checkbox.info input[data-indeterminate=true]~.check,.checkbox.info input[type=checkbox]:checked~.check{background-color:#5ebdec;border-color:#5ebdec}.checkbox.info .check{border-color:#5ebdec}.checkbox.dark input[data-indeterminate=true]~.check,.checkbox.dark input[type=checkbox]:checked~.check{background-color:#505050;border-color:#505050}.checkbox.dark .check{border-color:#505050}.checkbox.light input[data-indeterminate=true]~.check,.checkbox.light input[type=checkbox]:checked~.check{background-color:#f8f8f8;border-color:#f8f8f8}.checkbox.light .check{border-color:#f8f8f8}"]
    })
], CheckboxComponent);
export { CheckboxComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hlY2tib3guY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctbWV0cm80LyIsInNvdXJjZXMiOlsibGliL2Zvcm0vY2hlY2tib3gvY2hlY2tib3guY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsT0FBTyxFQUFDLHVCQUF1QixFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxpQkFBaUIsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNsSCxPQUFPLEVBQUMsV0FBVyxFQUFDLE1BQU0saUJBQWlCLENBQUM7QUFDNUMsT0FBTyxFQUFDLG9CQUFvQixFQUFDLE1BQU0scUNBQXFDLENBQUM7QUFDekUsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLHlCQUF5QixDQUFDO0FBRWxELE9BQU8sRUFBQyxZQUFZLEVBQUMsTUFBTSw0QkFBNEIsQ0FBQztBQVl4RCxJQUFhLGlCQUFpQix5QkFBOUIsTUFBYSxpQkFBa0IsU0FBUSxXQUFvQjtJQUEzRDs7UUFJcUIsYUFBUSxHQUFHLEtBQUssQ0FBQztJQTBFdEMsQ0FBQztJQTVEQyxhQUFhO1FBQ1gsT0FBTyxJQUFJLE9BQU8sQ0FBTyxDQUFDLFFBQVEsRUFBRSxFQUFFO1lBQ3BDLE1BQU0sZUFBZSxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBQ3BELFlBQVksQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7WUFFbkMsSUFBSSxJQUFJLENBQUMsYUFBYSxFQUFFO2dCQUN0QixJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDO2FBQ3RDO1lBRUQsSUFBSSxDQUFDLGFBQWEsR0FBRyxlQUFlLENBQUMsS0FBSyxFQUFFLENBQUM7WUFDN0MsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7WUFDdEMsZUFBZSxDQUFDLE1BQU0sRUFBRSxD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LGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO1FBQy9DLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJOztLQUN0QyxDQUFDO0dBQ1csaUJBQWlCLENBOEU3QjtTQTlFWSxpQkFBaUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDb21wb25lbnQsIEVsZW1lbnRSZWYsIElucHV0LCBWaWV3Q2hpbGQsIFZpZXdFbmNhcHN1bGF0aW9ufSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHtDb250cm9sQmFzZX0gZnJvbSAnLi4vY29udHJvbC1iYXNlJztcclxuaW1wb3J0IHtEZWZhdWx0VmFsdWVBY2Nlc3Nvcn0gZnJvbSAnLi4vLi4vaGVscGVyL2RlZmF1bHQtdmFsdWUtYWNjZXNzb3InO1xyXG5pbXBvcnQge1R5cGVBbGlhc30gZnJvbSAnLi4vLi4vaGVscGVyL3R5cGUtYWxpYXMnO1xyXG5pbXBvcnQge1Bvc2l0aW9uSG9yaXpvbnRhbFR5cGV9IGZyb20gJy4uLy4uL2hlbHBlci90eXBlcyc7XHJcbmltcG9ydCB7T2JqZWN0SGVscGVyfSBmcm9tICcuLi8uLi9oZWxwZXIvb2JqZWN0LWhlbHBlcic7XHJcblxyXG5kZWNsYXJlIHZhciAkOiBhbnk7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ200LWNoZWNrYm94JyxcclxuICB0ZW1wbGF0ZVVybDogJy4vY2hlY2tib3guY29tcG9uZW50Lmh0bWwnLFxyXG4gIHN0eWxlVXJsczogWycuL2NoZWNrYm94LmNvbXBvbmVudC5sZXNzJ10sXHJcbiAgcHJvdmlkZXJzOiBbRGVmYXVsdFZhbHVlQWNjZXNzb3IuZ2V0KENoZWNrYm94Q29tcG9uZW50KSwgVHlwZUFsaWFzLmdldChDaGVja2JveENvbXBvbmVudCldLFxyXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxyXG4gIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmVcclxufSlcclxuZXhwb3J0IGNsYXNzIENoZWNrYm94Q29tcG9uZW50IGV4dGVuZHMgQ29udHJvbEJhc2U8Ym9vbGVhbj4ge1xyXG5cclxuICBASW5wdXQoJ3ZhbHVlJykgdmFsdWU6IGFueTtcclxuXHJcbiAgQElucHV0KCdyZWFkb25seScpIHJlYWRvbmx5ID0gZmFsc2U7XHJcbiAgQElucHV0KCdzdHlsZScpIHN0eWxlOiAxfDI7XHJcbiAgQElucHV0KCdjYXB0aW9uJykgY2FwdGlvbjogc3RyaW5nO1xyXG4gIEBJbnB1dCgnY2FwdGlvbi1wb3NpdGlvbicpIGNhcHRpb25Qb3NpdGlvbjogUG9zaXRpb25Ib3Jpem9udGFsVHlwZTtcclxuICBASW5wdXQoJ2luZGV0ZXJtaW5hdGUnKSBpbmRldGVybWluYXRlOiBib29sZWFuO1xyXG5cclxuICBASW5wdXQoJ2Nscy1jaGVja2JveCcpIGNsc0NoZWNrYm94OiBzdHJpbmc7XHJcbiAgQElucHV0KCdjbHMtY2FwdGlvbicpIGNsc0NhcHRpb246IHN0cmluZztcclxuICBASW5wdXQoJ2Nscy1jaGVjaycpIGNsc0NoZWNrOiBzdHJpbmc7XHJcblxyXG4gIEBWaWV3Q2hpbGQoJ2lucHV0JywgeyBzdGF0aWM6IHRydWUgfSkgcHJpdmF0ZSBpbnB1dDogRWxlbWVudFJlZjtcclxuICBwcml2YXRlIGNsb25lZEVsZW1lbnQ6IGFueTtcclxuICBwcml2YXRlIGNoZWNrYm94OiBhbnk7XHJcblxyXG4gIGNyZWF0ZUNvbnRyb2woKSB7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2U8dm9pZD4oKGNvbXBsZXRlKSA9PiB7XHJcbiAgICAgIGNvbnN0IG9yaWdpbmFsRWxlbWVudCA9ICQodGhpcy5pbnB1dC5uYXRpdmVFbGVtZW50KTtcclxuICAgICAgT2JqZWN0SGVscGVyLmhpZGUob3JpZ2luYWxFbGVtZW50KTtcclxuXHJcbiAgICAgIGlmICh0aGlzLmNsb25lZEVsZW1lbnQpIHtcclxuICAgICAgICB0aGlzLmNsb25lZEVsZW1lbnQucGFyZW50KCkucmVtb3ZlKCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRoaXMuY2xvbmVkRWxlbWVudCA9IG9yaWdpbmFsRWxlbWVudC5jbG9uZSgpO1xyXG4gICAgICBPYmplY3RIZWxwZXIuc2hvdyh0aGlzLmNsb25lZEVsZW1lbnQpO1xyXG4gICAgICBvcmlnaW5hbEVsZW1lbnQucGFyZW50KCkuYXBwZW5kKHRoaXMuY2xvbmVkRWxlbWVudCk7XHJcblxyXG4gICAgICB0aGlzLmNoZWNrYm94ID0gdGhpcy5jbG9uZWRFbGVtZW50LmNoZWNrYm94KCkuZGF0YSgnY2hlY2tib3gnKTtcclxuXHJcbiAgICAgIHRoaXMuY2xvbmVkRWxlbWVudC5vbmUoJ2JsdXInLCAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy50b3VjaENhbGxiYWNrKCk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgdGhpcy5jbG9uZWRFbGVtZW50Lm9uKCdjaGFuZ2UnLCAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5jaGFuZ2VWYWx1ZSh0aGlzLmNsb25lZEVsZW1lbnQucHJvcCgnY2hlY2tlZCcpKTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICBjb21wbGV0ZSgpO1xyXG4gICAgfSk7XHJcblxyXG4gIH1cclxuXHJcbiAgZGlzYWJsZShkaXNhYmxlZDogYm9vbGVhbik6IHZvaWQge1xyXG4gICAgaWYgKGRpc2FibGVkKSB7XHJcbiAgICAgIHRoaXMuY2xvbmVkRWxlbWVudC5hdHRyKCdkaXNhYmxlZCcsICdkaXNhYmxlZCcpO1xyXG4gICAgICB0aGlzLmNoZWNrYm94LmRpc2FibGUoKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuY2xvbmVkRWxlbWVudC5yZW1vdmVBdHRyKCdkaXNhYmxlZCcpO1xyXG4gICAgICB0aGlzLmNoZWNrYm94LmVuYWJsZSgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgbmV3VmFsdWUoKTogdm9pZCB7XHJcbiAgICBpZiAoIXRoaXMuY2hlY2tib3gpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuY2xvbmVkRWxlbWVudC5wcm9wKCdjaGVja2VkJywgdGhpcy5pbm5lclZhbHVlKTtcclxuICB9XHJcblxyXG4gIG5ld0NsYXNzVmFsdWUobmV3Q2xhc3Nlczogc3RyaW5nW10sIG9sZENsYXNzZXM6IHN0cmluZ1tdKSB7XHJcbiAgICBpZiAodGhpcy5jbG9uZWRFbGVtZW50KSB7XHJcbiAgICAgIGNvbnN0IHRhcmdldCA9IHRoaXMuY2xvbmVkRWxlbWVudC5wYXJlbnQoKTtcclxuXHJcbiAgICAgIG9sZENsYXNzZXMuZm9yRWFjaCgoY2xzOiBzdHJpbmcpID0+IHtcclxuICAgICAgICB0YXJnZXQucmVtb3ZlQ2xhc3MoY2xzKTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICBuZXdDbGFzc2VzLmZvckVhY2goKGNsczogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgdGFyZ2V0LmFkZENsYXNzKGNscyk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbn1cclxuIl19