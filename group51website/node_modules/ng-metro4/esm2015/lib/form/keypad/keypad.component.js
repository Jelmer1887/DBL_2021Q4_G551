var KeypadComponent_1;
import { __decorate, __metadata } from "tslib";
import { ChangeDetectionStrategy, Component, ElementRef, Input, ViewChild } from '@angular/core';
import { DefaultValueAccessor } from '../../helper/default-value-accessor';
import { ControlBase } from '../control-base';
import { TypeAlias } from '../../helper/type-alias';
import { asapScheduler } from 'rxjs';
import { ObjectHelper } from '../../helper/object-helper';
let KeypadComponent = KeypadComponent_1 = class KeypadComponent extends ControlBase {
    constructor() {
        super(...arguments);
        this.type = 'text';
    }
    createControl() {
        return new Promise((complete) => {
            const originalElement = $(this.input.nativeElement);
            ObjectHelper.hide(originalElement);
            if (this.clonedElement) {
                this.clonedElement.parent().remove();
            }
            this.clonedElement = originalElement.clone();
            ObjectHelper.show(this.clonedElement);
            originalElement.parent().append(this.clonedElement);
            this.keypad = this.clonedElement.keypad().data('keypad');
            this.clonedElement.one('blur', () => {
                this.touchCallback();
            });
            this.clonedElement.on('change', () => {
                asapScheduler.schedule(() => {
                    let newValue = this.clonedElement.val();
                    if (this.type === 'number') {
                        newValue = +newValue;
                    }
                    this.changeValue(newValue);
                });
            });
            complete();
        });
    }
    disable(disabled) {
        if (disabled) {
            this.keypad.disable();
        }
        else {
            this.keypad.enable();
        }
    }
    newValue() {
        if (!this.keypad) {
            return;
        }
        this.keypad.val(this.innerValue ? this.innerValue.toString() : '');
    }
    newClassValue(newClasses, oldClasses) {
        if (this.clonedElement) {
            const target = this.clonedElement.parent();
            oldClasses.forEach((cls) => {
                target.removeClass(cls);
            });
            newClasses.forEach((cls) => {
                target.addClass(cls);
            });
        }
    }
};
__decorate([
    Input('type'),
    __metadata("design:type", String)
], KeypadComponent.prototype, "type", void 0);
__decorate([
    Input('key-size'),
    __metadata("design:type", Number)
], KeypadComponent.prototype, "keySize", void 0);
__decorate([
    Input('keys'),
    __metadata("design:type", Array)
], KeypadComponent.prototype, "keys", void 0);
__decorate([
    Input('key-length'),
    __metadata("design:type", Number)
], KeypadComponent.prototype, "keyLength", void 0);
__decorate([
    Input('shuffle'),
    __metadata("design:type", Boolean)
], KeypadComponent.prototype, "shuffle", void 0);
__decorate([
    Input('shuffle-count'),
    __metadata("design:type", Number)
], KeypadComponent.prototype, "shuffleCount", void 0);
__decorate([
    Input('position'),
    __metadata("design:type", String)
], KeypadComponent.prototype, "position", void 0);
__decorate([
    Input('dynamic-position'),
    __metadata("design:type", Boolean)
], KeypadComponent.prototype, "dynamicPosition", void 0);
__decorate([
    Input('service-buttons'),
    __metadata("design:type", Boolean)
], KeypadComponent.prototype, "serviceButtons", void 0);
__decorate([
    Input('show-value'),
    __metadata("design:type", Boolean)
], KeypadComponent.prototype, "showValue", void 0);
__decorate([
    Input('open'),
    __metadata("design:type", Boolean)
], KeypadComponent.prototype, "open", void 0);
__decorate([
    Input('size-as-keys'),
    __metadata("design:type", Boolean)
], KeypadComponent.prototype, "sizeAsKeys", void 0);
__decorate([
    Input('cls-keypad'),
    __metadata("design:type", String)
], KeypadComponent.prototype, "clsKeypad", void 0);
__decorate([
    Input('cls-input'),
    __metadata("design:type", String)
], KeypadComponent.prototype, "clsInput", void 0);
__decorate([
    Input('cls-keys'),
    __metadata("design:type", String)
], KeypadComponent.prototype, "clsKeys", void 0);
__decorate([
    Input('cls-key'),
    __metadata("design:type", String)
], KeypadComponent.prototype, "clsKey", void 0);
__decorate([
    Input('cls-service-key'),
    __metadata("design:type", String)
], KeypadComponent.prototype, "clsServiceKey", void 0);
__decorate([
    Input('cls-backspace'),
    __metadata("design:type", String)
], KeypadComponent.prototype, "clsBackspace", void 0);
__decorate([
    Input('cls-clear'),
    __metadata("design:type", String)
], KeypadComponent.prototype, "clsClear", void 0);
__decorate([
    ViewChild('input', { static: true }),
    __metadata("design:type", ElementRef)
], KeypadComponent.prototype, "input", void 0);
KeypadComponent = KeypadComponent_1 = __decorate([
    Component({
        selector: 'm4-keypad',
        template: "<input [type]=\"type\" #input\r\n\r\n\r\n       [attr.data-key-size]=\"keySize\"\r\n       [attr.data-keys]=\"keys?.join(',')\"\r\n       [attr.data-key-length]=\"keyLength\"\r\n       [attr.data-shuffle]=\"shuffle\"\r\n       [attr.data-shuffle-count]=\"shuffleCount\"\r\n       [attr.data-position]=\"position\"\r\n       [attr.data-dynamic-position]=\"dynamicPosition\"\r\n       [attr.data-service-buttons]=\"serviceButtons\"\r\n       [attr.data-show-value]=\"showValue\"\r\n       [attr.data-open]=\"open\"\r\n       [attr.data-size-as-keys]=\"sizeAsKeys\"\r\n\r\n       [attr.data-cls-keypad]=\"clsKeypad\"\r\n       [attr.data-cls-input]=\"clsInput\"\r\n       [attr.data-cls-keys]=\"clsKeys\"\r\n       [attr.data-cls-key]=\"clsKey\"\r\n       [attr.data-cls-service-key]=\"clsServiceKey\"\r\n       [attr.data-cls-backspace]=\"clsBackspace\"\r\n       [attr.data-cls-clear]=\"clsClear\">\r\n",
        providers: [DefaultValueAccessor.get(KeypadComponent_1), TypeAlias.get(KeypadComponent_1)],
        changeDetection: ChangeDetectionStrategy.OnPush,
        styles: [""]
    })
], KeypadComponent);
export { KeypadComponent };
//# sourceMappingURL=data:application/json;base64,