var SpinnerComponent_1;
import { __decorate, __metadata } from "tslib";
import { ChangeDetectionStrategy, Component, ElementRef, Input, ViewChild } from '@angular/core';
import { ControlBase } from '../control-base';
import { DefaultValueAccessor } from '../../helper/default-value-accessor';
import { TypeAlias } from '../../helper/type-alias';
import { asapScheduler } from 'rxjs';
import { ObjectHelper } from '../../helper/object-helper';
let SpinnerComponent = SpinnerComponent_1 = class SpinnerComponent extends ControlBase {
    constructor() {
        super(...arguments);
        this.step = 1;
        this.fixed = 0;
        this.hideCursor = false;
    }
    createControl() {
        return new Promise((complete) => {
            const originalElement = $(this.input.nativeElement);
            ObjectHelper.hide(originalElement);
            if (this.clonedElement) {
                this.clonedElement.parent().remove();
            }
            this.clonedElement = originalElement.clone();
            ObjectHelper.show(this.clonedElement);
            originalElement.parent().append(this.clonedElement);
            this.spinner = this.clonedElement.spinner().data('spinner');
            this.clonedElement.parent().off('mousedown mouseup keydown change');
            this.clonedElement.one('blur', () => {
                this.touchCallback();
            });
            this.clonedElement.on('change', () => {
                if (this.disableUpdate) {
                    return;
                }
                const newVal = +this.clonedElement.val();
                this.changeValue(newVal);
                this.setValue(newVal);
            });
            complete();
        });
    }
    disable(disabled) {
        if (disabled) {
            this.spinner.disable();
        }
        else {
            this.spinner.enable();
        }
    }
    setValue(newValue) {
        if (this.minValue !== undefined && this.minValue !== null && newValue < this.minValue) {
            newValue = this.minValue;
            asapScheduler.schedule(() => {
                this.changeValue(newValue);
            });
        }
        if (this.maxValue !== undefined && this.maxValue !== null && newValue > this.maxValue) {
            newValue = this.maxValue;
            asapScheduler.schedule(() => {
                this.changeValue(newValue);
            });
        }
        this.clonedElement.val(newValue.toFixed(this.fixed));
    }
    newValue() {
        if (!this.spinner || !this.innerValue) {
            return;
        }
        this.setValue(this.innerValue);
    }
    newClassValue(newClasses, oldClasses) {
        if (this.clonedElement) {
            const target = this.clonedElement.parent();
            oldClasses.forEach((cls) => {
                target.removeClass(cls);
            });
            newClasses.forEach((cls) => {
                target.addClass(cls);
            });
        }
    }
};
__decorate([
    Input('step'),
    __metadata("design:type", Object)
], SpinnerComponent.prototype, "step", void 0);
__decorate([
    Input('plus-icon'),
    __metadata("design:type", String)
], SpinnerComponent.prototype, "plusIcon", void 0);
__decorate([
    Input('minus-icon'),
    __metadata("design:type", String)
], SpinnerComponent.prototype, "minusIcon", void 0);
__decorate([
    Input('buttons-position'),
    __metadata("design:type", String)
], SpinnerComponent.prototype, "buttonsPosition", void 0);
__decorate([
    Input('min-value'),
    __metadata("design:type", Number)
], SpinnerComponent.prototype, "minValue", void 0);
__decorate([
    Input('max-value'),
    __metadata("design:type", Number)
], SpinnerComponent.prototype, "maxValue", void 0);
__decorate([
    Input('fixed'),
    __metadata("design:type", Object)
], SpinnerComponent.prototype, "fixed", void 0);
__decorate([
    Input('hide-cursor'),
    __metadata("design:type", Object)
], SpinnerComponent.prototype, "hideCursor", void 0);
__decorate([
    Input('cls-spinner'),
    __metadata("design:type", String)
], SpinnerComponent.prototype, "clsSpinner", void 0);
__decorate([
    Input('cls-spinner-input'),
    __metadata("design:type", String)
], SpinnerComponent.prototype, "clsSpinnerInput", void 0);
__decorate([
    Input('cls-spinner-button'),
    __metadata("design:type", String)
], SpinnerComponent.prototype, "clsSpinnerButton", void 0);
__decorate([
    Input('cls-spinner-button-plus'),
    __metadata("design:type", String)
], SpinnerComponent.prototype, "clsSpinnerButtonPlus", void 0);
__decorate([
    Input('cls-spinner-button-minus'),
    __metadata("design:type", String)
], SpinnerComponent.prototype, "clsSpinnerButtonMinus", void 0);
__decorate([
    ViewChild('input', { static: true }),
    __metadata("design:type", ElementRef)
], SpinnerComponent.prototype, "input", void 0);
SpinnerComponent = SpinnerComponent_1 = __decorate([
    Component({
        selector: 'm4-spinner',
        template: "<input type=\"text\" #input\r\n\r\n\r\n       [attr.data-step]=\"step\"\r\n       [attr.data-fixed]=\"fixed\"\r\n       [attr.data-plus-icon]=\"plusIcon\"\r\n       [attr.data-minus-icon]=\"minusIcon\"\r\n       [attr.data-buttons-position]=\"buttonsPosition\"\r\n\r\n       [attr.data-hide-cursor]=\"hideCursor\"\r\n       [style.textShadow]=\"hideCursor ? '0 0 0 #1d1d1d' : null\"\r\n\r\n       [attr.data-cls-spinner]=\"clsSpinner\"\r\n       [attr.data-cls-spinner-input]=\"clsSpinnerInput\"\r\n       [attr.data-cls-spinner-button]=\"clsSpinnerButton\"\r\n       [attr.data-cls-spinner-button-minus]=\"clsSpinnerButtonMinus\"\r\n       [attr.data-cls-spinner-button-plus]=\"clsSpinnerButtonPlus\" >\r\n",
        providers: [DefaultValueAccessor.get(SpinnerComponent_1), TypeAlias.get(SpinnerComponent_1)],
        changeDetection: ChangeDetectionStrategy.OnPush,
        styles: [""]
    })
], SpinnerComponent);
export { SpinnerComponent };
//# sourceMappingURL=data:application/json;base64,