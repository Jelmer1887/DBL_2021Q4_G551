var RadioGroupComponent_1;
import { __decorate, __metadata } from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, ElementRef, forwardRef, Input, QueryList, ViewChildren } from '@angular/core';
import { DefaultValueAccessor } from '../../helper/default-value-accessor';
import { ControlBase } from '../control-base';
import { RadioComponent } from '../radio/radio.component';
import { StringHelper } from '../../helper/string-helper';
import { TypeAlias } from '../../helper/type-alias';
import { asapScheduler } from 'rxjs';
let RadioGroupComponent = RadioGroupComponent_1 = class RadioGroupComponent extends ControlBase {
    constructor(element, cdRef) {
        super(element, cdRef);
        this.name = StringHelper.guid();
    }
    createControl() {
        return new Promise((complete) => {
            asapScheduler.schedule(() => {
                this.radios = !!this.options ? this.radiosView : this.radiosContent;
                const radioCreations = this.radios.map((item) => {
                    return new Promise((radioComplete) => {
                        item.name = this.name;
                        item.registerOnChange((v) => {
                            this.changeValue(v);
                            this.newValue();
                        });
                        item.registerOnTouched(() => {
                            this.touchCallback();
                        });
                        asapScheduler.schedule(() => {
                            item.createControl().then(() => {
                                radioComplete();
                            });
                        }, 1);
                    });
                });
                Promise.all(radioCreations).then(() => {
                    this.callNewValue();
                    complete();
                });
            });
        });
    }
    disable(disabled) {
        this.radios.forEach((item) => {
            asapScheduler.schedule(() => {
                item.disable(disabled);
            }, 1);
        });
    }
    newValue() {
        if (!this.radios) {
            return;
        }
        this.radios.forEach((item) => {
            item.writeValue(this.innerValue);
        });
    }
    newClassValue(newClasses, oldClasses) {
        this.radios.forEach((item) => {
            asapScheduler.schedule(() => {
                item.newClassValue(newClasses, oldClasses);
            }, 1);
        });
    }
};
RadioGroupComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: ChangeDetectorRef }
];
__decorate([
    Input(),
    __metadata("design:type", Object)
], RadioGroupComponent.prototype, "options", void 0);
__decorate([
    ContentChildren(forwardRef(() => RadioComponent), { descendants: true }),
    __metadata("design:type", QueryList)
], RadioGroupComponent.prototype, "radiosContent", void 0);
__decorate([
    ViewChildren(forwardRef(() => RadioComponent)),
    __metadata("design:type", QueryList)
], RadioGroupComponent.prototype, "radiosView", void 0);
RadioGroupComponent = RadioGroupComponent_1 = __decorate([
    Component({
        selector: 'm4-radio-group',
        template: "<ng-container *ngIf=\"options; else noOptions\">\r\n  <m4-radio *ngFor=\"let option of options | objectKeys\" [value]=\"options[option]\"\r\n            [caption]=\"option\" [name]=\"name\"></m4-radio>\r\n</ng-container>\r\n<ng-template #noOptions>\r\n  <ng-content></ng-content>\r\n</ng-template>\r\n",
        providers: [DefaultValueAccessor.get(RadioGroupComponent_1), TypeAlias.get(RadioGroupComponent_1)],
        changeDetection: ChangeDetectionStrategy.OnPush,
        styles: [""]
    }),
    __metadata("design:paramtypes", [ElementRef, ChangeDetectorRef])
], RadioGroupComponent);
export { RadioGroupComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFkaW8tZ3JvdXAuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctbWV0cm80LyIsInNvdXJjZXMiOlsibGliL2Zvcm0vcmFkaW8tZ3JvdXAvcmFkaW8tZ3JvdXAuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsT0FBTyxFQUNMLHVCQUF1QixFQUN2QixpQkFBaUIsRUFDakIsU0FBUyxFQUNULGVBQWUsRUFDZixVQUFVLEVBQ1YsVUFBVSxFQUNWLEtBQUssRUFDTCxTQUFTLEVBQ1QsWUFBWSxFQUNiLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBQyxvQkFBb0IsRUFBQyxNQUFNLHFDQUFxQyxDQUFDO0FBQ3pFLE9BQU8sRUFBQyxXQUFXLEVBQUMsTUFBTSxpQkFBaUIsQ0FBQztBQUM1QyxPQUFPLEVBQUMsY0FBYyxFQUFDLE1BQU0sMEJBQTBCLENBQUM7QUFDeEQsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLDRCQUE0QixDQUFDO0FBQ3hELE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSx5QkFBeUIsQ0FBQztBQUNsRCxPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sTUFBTSxDQUFDO0FBV25DLElBQWEsbUJBQW1CLDJCQUFoQyxNQUFhLG1CQUFvQixTQUFRLFdBQWdCO0lBV3ZELFlBQVksT0FBbUIsRUFBRSxLQUF3QjtRQUN2RCxLQUFLLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ3RCLElBQUksQ0FBQyxJQUFJLEdBQUcsWUFBWSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ2xDLENBQUM7SUFFRCxhQUFhO1FBQ1gsT0FBTyxJQUFJLE9BQU8sQ0FBTyxDQUFDLFFBQVEsRUFBRSxFQUFFO1lBQ3BDLGFBQWEsQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFO2dCQUMxQixJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxD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QUUzQyxTQUFTLEVBQUUsQ0FBQyxvQkFBb0IsQ0FBQyxHQUFHLENBQUMscUJBQW1CLENBQUMsRUFBRSxTQUFTLENBQUMsR0FBRyxDQUFDLHFCQUFtQixDQUFDLENBQUM7UUFDOUYsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07O0tBQ2hELENBQUM7cUNBWXFCLFVBQVUsRUFBUyxpQkFBaUI7R0FYOUMsbUJBQW1CLENBMkUvQjtTQTNFWSxtQkFBbUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxyXG4gIENoYW5nZURldGVjdG9yUmVmLFxyXG4gIENvbXBvbmVudCxcclxuICBDb250ZW50Q2hpbGRyZW4sXHJcbiAgRWxlbWVudFJlZixcclxuICBmb3J3YXJkUmVmLFxyXG4gIElucHV0LFxyXG4gIFF1ZXJ5TGlzdCxcclxuICBWaWV3Q2hpbGRyZW5cclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHtEZWZhdWx0VmFsdWVBY2Nlc3Nvcn0gZnJvbSAnLi4vLi4vaGVscGVyL2RlZmF1bHQtdmFsdWUtYWNjZXNzb3InO1xyXG5pbXBvcnQge0NvbnRyb2xCYXNlfSBmcm9tICcuLi9jb250cm9sLWJhc2UnO1xyXG5pbXBvcnQge1JhZGlvQ29tcG9uZW50fSBmcm9tICcuLi9yYWRpby9yYWRpby5jb21wb25lbnQnO1xyXG5pbXBvcnQge1N0cmluZ0hlbHBlcn0gZnJvbSAnLi4vLi4vaGVscGVyL3N0cmluZy1oZWxwZXInO1xyXG5pbXBvcnQge1R5cGVBbGlhc30gZnJvbSAnLi4vLi4vaGVscGVyL3R5cGUtYWxpYXMnO1xyXG5pbXBvcnQge2FzYXBTY2hlZHVsZXJ9IGZyb20gJ3J4anMnO1xyXG5cclxuZGVjbGFyZSB2YXIgJDogYW55O1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdtNC1yYWRpby1ncm91cCcsXHJcbiAgdGVtcGxhdGVVcmw6ICcuL3JhZGlvLWdyb3VwLmNvbXBvbmVudC5odG1sJyxcclxuICBzdHlsZVVybHM6IFsnLi9yYWRpby1ncm91cC5jb21wb25lbnQuY3NzJ10sXHJcbiAgcHJvdmlkZXJzOiBbRGVmYXVsdFZhbHVlQWNjZXNzb3IuZ2V0KFJhZGlvR3JvdXBDb21wb25lbnQpLCBUeXBlQWxpYXMuZ2V0KFJhZGlvR3JvdXBDb21wb25lbnQpXSxcclxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaFxyXG59KVxyXG5leHBvcnQgY2xhc3MgUmFkaW9Hcm91cENvbXBvbmVudCBleHRlbmRzIENvbnRyb2xCYXNlPGFueT4ge1xyXG5cclxuICBASW5wdXQoKSBvcHRpb25zOiB7IFt0aXRsZTogc3RyaW5nXTogYW55IH07XHJcblxyXG4gIEBDb250ZW50Q2hpbGRyZW4oZm9yd2FyZFJlZigoKSA9PiBSYWRpb0NvbXBvbmVudCksIHsgZGVzY2VuZGFudHM6IHRydWUgfSkgcmFkaW9zQ29udGVudDogUXVlcnlMaXN0PFJhZGlvQ29tcG9uZW50PjtcclxuICBAVmlld0NoaWxkcmVuKGZvcndhcmRSZWYoKCkgPT4gUmFkaW9Db21wb25lbnQpKSByYWRpb3NWaWV3OiBRdWVyeUxpc3Q8UmFkaW9Db21wb25lbnQ+O1xyXG5cclxuICBwcml2YXRlIHJhZGlvczogUXVlcnlMaXN0PFJhZGlvQ29tcG9uZW50PjtcclxuXHJcbiAgcHVibGljIG5hbWU6IHN0cmluZztcclxuXHJcbiAgY29uc3RydWN0b3IoZWxlbWVudDogRWxlbWVudFJlZiwgY2RSZWY6IENoYW5nZURldGVjdG9yUmVmKSB7XHJcbiAgICBzdXBlcihlbGVtZW50LCBjZFJlZik7XHJcbiAgICB0aGlzLm5hbWUgPSBTdHJpbmdIZWxwZXIuZ3VpZCgpO1xyXG4gIH1cclxuXHJcbiAgY3JlYXRlQ29udHJvbCgpIHtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZTx2b2lkPigoY29tcGxldGUpID0+IHtcclxuICAgICAgYXNhcFNjaGVkdWxlci5zY2hlZHVsZSgoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5yYWRpb3MgPSAhIXRoaXMub3B0aW9ucyA/IHRoaXMucmFkaW9zVmlldyA6IHRoaXMucmFkaW9zQ29udGVudDtcclxuXHJcbiAgICAgICAgY29uc3QgcmFkaW9DcmVhdGlvbnMgPSB0aGlzLnJhZGlvcy5tYXAoKGl0ZW0pID0+IHtcclxuICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZTx2b2lkPigocmFkaW9Db21wbGV0ZSkgPT4ge1xyXG4gICAgICAgICAgICBpdGVtLm5hbWUgPSB0aGlzLm5hbWU7XHJcbiAgICAgICAgICAgIGl0ZW0ucmVnaXN0ZXJPbkNoYW5nZSgodikgPT4ge1xyXG4gICAgICAgICAgICAgIHRoaXMuY2hhbmdlVmFsdWUodik7XHJcbiAgICAgICAgICAgICAgdGhpcy5uZXdWYWx1ZSgpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIGl0ZW0ucmVnaXN0ZXJPblRvdWNoZWQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgIHRoaXMudG91Y2hDYWxsYmFjaygpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIGFzYXBTY2hlZHVsZXIuc2NoZWR1bGUoKCkgPT4ge1xyXG4gICAgICAgICAgICAgIGl0ZW0uY3JlYXRlQ29udHJvbCgpLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmFkaW9Db21wbGV0ZSgpO1xyXG4gICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9LCAxKTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBQcm9taXNlLmFsbChyYWRpb0NyZWF0aW9ucykudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICB0aGlzLmNhbGxOZXdWYWx1ZSgpO1xyXG4gICAgICAgICAgY29tcGxldGUoKTtcclxuICAgICAgICB9KTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuXHJcbiAgfVxyXG5cclxuICBkaXNhYmxlKGRpc2FibGVkOiBib29sZWFuKTogdm9pZCB7XHJcbiAgICB0aGlzLnJhZGlvcy5mb3JFYWNoKChpdGVtKSA9PiB7XHJcbiAgICAgIGFzYXBTY2hlZHVsZXIuc2NoZWR1bGUoKCkgPT4ge1xyXG4gICAgICAgIGl0ZW0uZGlzYWJsZShkaXNhYmxlZCk7XHJcbiAgICAgIH0sIDEpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBuZXdWYWx1ZSgpOiB2b2lkIHtcclxuICAgIGlmICghdGhpcy5yYWRpb3MpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMucmFkaW9zLmZvckVhY2goKGl0ZW0pID0+IHtcclxuICAgICAgaXRlbS53cml0ZVZhbHVlKHRoaXMuaW5uZXJWYWx1ZSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIG5ld0NsYXNzVmFsdWUobmV3Q2xhc3Nlczogc3RyaW5nW10sIG9sZENsYXNzZXM6IHN0cmluZ1tdKSB7XHJcbiAgICB0aGlzLnJhZGlvcy5mb3JFYWNoKChpdGVtKSA9PiB7XHJcbiAgICAgIGFzYXBTY2hlZHVsZXIuc2NoZWR1bGUoKCkgPT4ge1xyXG4gICAgICAgIGl0ZW0ubmV3Q2xhc3NWYWx1ZShuZXdDbGFzc2VzLCBvbGRDbGFzc2VzKTtcclxuICAgICAgfSwgMSk7XHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuIl19