import { __decorate, __metadata } from "tslib";
import { Directive, ElementRef, HostBinding, HostListener, Input, OnChanges, OnInit, Renderer2, SimpleChanges } from '@angular/core';
let ButtonDirective = class ButtonDirective {
    constructor(element, renderer) {
        this.element = element;
        this.renderer = renderer;
        this.oldClasses = [];
        this.jElement = $(this.element.nativeElement);
    }
    createElement() {
        if (!this.type) {
            this.type = 'button';
        }
        const buttonClass = this.specialBtn === 'command' ? 'command-button' :
            this.specialBtn === 'image' ? 'image-button' :
                this.specialBtn === 'shortcut' ? 'shortcut' :
                    this.specialBtn === 'ribbon' ? 'ribbon-button' :
                        this.specialBtn === 'action' || this.specialBtn === 'multi-action' ? 'action-button' : 'button';
        const newClasses = [buttonClass];
        if (this.btnStyle) {
            newClasses.push(this.btnStyle);
        }
        if (this.outline) {
            newClasses.push('outline');
        }
        if (this.size) {
            newClasses.push(this.size);
        }
        if (this.rounded) {
            newClasses.push('rounded');
        }
        if (this.shape) {
            newClasses.push(this.shape);
        }
        if (this.shadow) {
            newClasses.push('drop-shadow');
        }
        if (this.flat) {
            newClasses.push('flat-button');
        }
        this.oldClasses.forEach(c => {
            this.jElement.removeClass(c);
        });
        newClasses.forEach(c => {
            this.jElement.addClass(c);
        });
        this.oldClasses = newClasses;
    }
    clickEvent() {
        if (this.specialBtn === 'multi-action') {
            this.jElement.toggleClass('active');
        }
    }
    ngOnInit() {
        this.createElement();
    }
    ngOnChanges(changes) {
        this.createElement();
    }
};
ButtonDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
__decorate([
    Input('btn-style'),
    __metadata("design:type", String)
], ButtonDirective.prototype, "btnStyle", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], ButtonDirective.prototype, "outline", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], ButtonDirective.prototype, "size", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], ButtonDirective.prototype, "rounded", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], ButtonDirective.prototype, "shape", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], ButtonDirective.prototype, "shadow", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], ButtonDirective.prototype, "flat", void 0);
__decorate([
    Input('special-btn'),
    __metadata("design:type", String)
], ButtonDirective.prototype, "specialBtn", void 0);
__decorate([
    Input(), HostBinding('type'),
    __metadata("design:type", Object)
], ButtonDirective.prototype, "type", void 0);
__decorate([
    HostListener('click'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], ButtonDirective.prototype, "clickEvent", null);
ButtonDirective = __decorate([
    Directive({
        selector: 'button[m4-button]',
    }),
    __metadata("design:paramtypes", [ElementRef, Renderer2])
], ButtonDirective);
export { ButtonDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnV0dG9uLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nLW1ldHJvNC8iLCJzb3VyY2VzIjpbImxpYi9iYXNlL2J1dHRvbi9idXR0b24uZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxhQUFhLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFTbkksSUFBYSxlQUFlLEdBQTVCLE1BQWEsZUFBZTtJQWUxQixZQUFvQixPQUFtQixFQUFVLFFBQW1CO1FBQWhELFlBQU8sR0FBUCxPQUFPLENBQVk7UUFBVSxhQUFRLEdBQVIsUUFBUSxDQUFXO1FBRjVELGVBQVUsR0FBYSxFQUFFLENBQUM7UUFHaEMsSUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUNoRCxDQUFDO0lBRU8sYUFBYTtRQUNuQixJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRTtZQUNkLElBQUksQ0FBQyxJQUFJLEdBQUcsUUFBUSxDQUFDO1NBQ3RCO1FBRUQsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLFVBQVUsS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLENBQUM7WUFDcEUsSUFBSSxDQUFDLFVBQVUsS0FBSyxPQUFPLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDO2dCQUM1QyxJQUFJLENBQUMsVUFBVSxLQUFLLFVBQVUsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUM7b0JBQzNDLElBQUksQ0FBQyxVQUFVLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxlQUFlLENBQUMsQ0FBQzt3QkFDOUMsSUFBSSxDQUFDLFVBQVUsS0FBSyxRQUFRLElBQUksSUFBSSxDQUFDLFVBQVUsS0FBSyxjQUFjLENBQUMsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDO1FBRXhHLE1BQU0sVUFBVSxHQUFHLENBQUUsV0FBVyxDQUFFLENBQUM7UUFFbkMsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2pCLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQ2hDO1FBRUQsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2hCLFVBQVUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7U0FDNUI7UUFFRCxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUU7WUFDYixVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUM1QjtRQUVELElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNoQixVQUFVLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1NBQzVCO1FBRUQsSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ2QsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDN0I7UUFFRCxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDZixVQUFVLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1NBQ2hDO1FBRUQsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ2IsVUFBVSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztTQUNoQztRQUVELElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFO1lBQzFCLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQy9CLENBQUMsQ0FBQyxDQUFDO1FBQ0gsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUNyQixJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM1QixDQUFDLENBQUMsQ0FBQztRQUNILElBQUksQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDO0lBQy9CLENBQUM7SUFHRCxVQUFVO1FBQ1IsSUFBSSxJQUFJLENBQUMsVUFBVSxLQUFLLGNBQWMsRUFBRTtZQUN0QyxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUNyQztJQUNILENBQUM7SUFFRCxRQUFRO1FBQ04sSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQ3ZCLENBQUM7SUFFRCxXQUFXLENBQUMsT0FBc0I7UUFDaEMsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQ3ZCLENBQUM7Q0FDRixDQUFBOztZQXBFOEIsVUFBVTtZQUFvQixTQUFTOztBQWRoRDtJQUFuQixLQUFLLENBQUMsV0FBVyxDQUFDOztpREFBc0I7QUFDaEM7SUFBUixLQUFLLEVBQUU7O2dEQUFrQjtBQUNqQjtJQUFSLEtBQUssRUFBRTs7NkNBQWdCO0FBQ2Y7SUFBUixLQUFLLEVBQUU7O2dEQUFrQjtBQUNqQjtJQUFSLEtBQUssRUFBRTs7OENBQXdCO0FBQ3ZCO0lBQVIsS0FBSyxFQUFFOzsrQ0FBaUI7QUFDaEI7SUFBUixLQUFLLEVBQUU7OzZDQUFlO0FBQ0Q7SUFBckIsS0FBSyxDQUFDLGFBQWEsQ0FBQzs7bURBQStCO0FBRXRCO0lBQTdCLEtBQUssRUFBRSxFQUFFLFdBQVcsQ0FBQyxNQUFNLENBQUM7OzZDQUFNO0FBNERuQztJQURDLFlBQVksQ0FBQyxPQUFPLENBQUM7Ozs7aURBS3JCO0FBMUVVLGVBQWU7SUFKM0IsU0FBUyxDQUFDO1FBQ1QsUUFBUSxFQUFFLG1CQUFtQjtLQUU5QixDQUFDO3FDQWdCNkIsVUFBVSxFQUFvQixTQUFTO0dBZnpELGVBQWUsQ0FtRjNCO1NBbkZZLGVBQWUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0RpcmVjdGl2ZSwgRWxlbWVudFJlZiwgSG9zdEJpbmRpbmcsIEhvc3RMaXN0ZW5lciwgSW5wdXQsIE9uQ2hhbmdlcywgT25Jbml0LCBSZW5kZXJlcjIsIFNpbXBsZUNoYW5nZXN9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge0FjY2VudFR5cGUsIEJ1dHRvblNoYXBlVHlwZSwgQnV0dG9uU3BlY2lhbFR5cGUsIFNpemVUeXBlfSBmcm9tICcuLi8uLi9oZWxwZXIvdHlwZXMnO1xyXG5cclxuZGVjbGFyZSB2YXIgJDogYW55O1xyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgc2VsZWN0b3I6ICdidXR0b25bbTQtYnV0dG9uXScsXHJcblxyXG59KVxyXG5leHBvcnQgY2xhc3MgQnV0dG9uRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMge1xyXG4gIEBJbnB1dCgnYnRuLXN0eWxlJykgYnRuU3R5bGU6IEFjY2VudFR5cGU7XHJcbiAgQElucHV0KCkgb3V0bGluZTogYm9vbGVhbjtcclxuICBASW5wdXQoKSBzaXplOiBTaXplVHlwZTtcclxuICBASW5wdXQoKSByb3VuZGVkOiBib29sZWFuO1xyXG4gIEBJbnB1dCgpIHNoYXBlOiBCdXR0b25TaGFwZVR5cGU7XHJcbiAgQElucHV0KCkgc2hhZG93OiBib29sZWFuO1xyXG4gIEBJbnB1dCgpIGZsYXQ6IGJvb2xlYW47XHJcbiAgQElucHV0KCdzcGVjaWFsLWJ0bicpIHNwZWNpYWxCdG46IEJ1dHRvblNwZWNpYWxUeXBlO1xyXG5cclxuICBASW5wdXQoKSBASG9zdEJpbmRpbmcoJ3R5cGUnKSB0eXBlO1xyXG5cclxuICBwcml2YXRlIGpFbGVtZW50OiBhbnk7XHJcbiAgcHJpdmF0ZSBvbGRDbGFzc2VzOiBzdHJpbmdbXSA9IFtdO1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsZW1lbnQ6IEVsZW1lbnRSZWYsIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMikge1xyXG4gICAgdGhpcy5qRWxlbWVudCA9ICQodGhpcy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBjcmVhdGVFbGVtZW50KCkge1xyXG4gICAgaWYgKCF0aGlzLnR5cGUpIHtcclxuICAgICAgdGhpcy50eXBlID0gJ2J1dHRvbic7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgYnV0dG9uQ2xhc3MgPSB0aGlzLnNwZWNpYWxCdG4gPT09ICdjb21tYW5kJyA/ICdjb21tYW5kLWJ1dHRvbicgOlxyXG4gICAgICB0aGlzLnNwZWNpYWxCdG4gPT09ICdpbWFnZScgPyAnaW1hZ2UtYnV0dG9uJyA6XHJcbiAgICAgICAgdGhpcy5zcGVjaWFsQnRuID09PSAnc2hvcnRjdXQnID8gJ3Nob3J0Y3V0JyA6XHJcbiAgICAgICAgICB0aGlzLnNwZWNpYWxCdG4gPT09ICdyaWJib24nID8gJ3JpYmJvbi1idXR0b24nIDpcclxuICAgICAgICAgICAgdGhpcy5zcGVjaWFsQnRuID09PSAnYWN0aW9uJyB8fCB0aGlzLnNwZWNpYWxCdG4gPT09ICdtdWx0aS1hY3Rpb24nID8gJ2FjdGlvbi1idXR0b24nIDogJ2J1dHRvbic7XHJcblxyXG4gICAgY29uc3QgbmV3Q2xhc3NlcyA9IFsgYnV0dG9uQ2xhc3MgXTtcclxuXHJcbiAgICBpZiAodGhpcy5idG5TdHlsZSkge1xyXG4gICAgICBuZXdDbGFzc2VzLnB1c2godGhpcy5idG5TdHlsZSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMub3V0bGluZSkge1xyXG4gICAgICBuZXdDbGFzc2VzLnB1c2goJ291dGxpbmUnKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodGhpcy5zaXplKSB7XHJcbiAgICAgIG5ld0NsYXNzZXMucHVzaCh0aGlzLnNpemUpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0aGlzLnJvdW5kZWQpIHtcclxuICAgICAgbmV3Q2xhc3Nlcy5wdXNoKCdyb3VuZGVkJyk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMuc2hhcGUpIHtcclxuICAgICAgbmV3Q2xhc3Nlcy5wdXNoKHRoaXMuc2hhcGUpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0aGlzLnNoYWRvdykge1xyXG4gICAgICBuZXdDbGFzc2VzLnB1c2goJ2Ryb3Atc2hhZG93Jyk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMuZmxhdCkge1xyXG4gICAgICBuZXdDbGFzc2VzLnB1c2goJ2ZsYXQtYnV0dG9uJyk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5vbGRDbGFzc2VzLmZvckVhY2goYyA9PiB7XHJcbiAgICAgIHRoaXMuakVsZW1lbnQucmVtb3ZlQ2xhc3MoYyk7XHJcbiAgICB9KTtcclxuICAgIG5ld0NsYXNzZXMuZm9yRWFjaChjID0+IHtcclxuICAgICAgdGhpcy5qRWxlbWVudC5hZGRDbGFzcyhjKTtcclxuICAgIH0pO1xyXG4gICAgdGhpcy5vbGRDbGFzc2VzID0gbmV3Q2xhc3NlcztcclxuICB9XHJcblxyXG4gIEBIb3N0TGlzdGVuZXIoJ2NsaWNrJylcclxuICBjbGlja0V2ZW50KCkge1xyXG4gICAgaWYgKHRoaXMuc3BlY2lhbEJ0biA9PT0gJ211bHRpLWFjdGlvbicpIHtcclxuICAgICAgdGhpcy5qRWxlbWVudC50b2dnbGVDbGFzcygnYWN0aXZlJyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBuZ09uSW5pdCgpOiB2b2lkIHtcclxuICAgIHRoaXMuY3JlYXRlRWxlbWVudCgpO1xyXG4gIH1cclxuXHJcbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQge1xyXG4gICAgdGhpcy5jcmVhdGVFbGVtZW50KCk7XHJcbiAgfVxyXG59XHJcbiJdfQ==