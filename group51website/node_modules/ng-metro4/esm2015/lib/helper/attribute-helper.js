import { observerClassExceptions } from './lists';
export class AttributeHelper {
    /**
     * Sets an attribute to the element or removes the attribute if no value is given
     * @param renderer The renderer
     * @param element The element
     * @param attribute The attribute
     * @param value The optional value
     */
    static setAttribute(renderer, element, attribute, value) {
        if (value) {
            renderer.setAttribute(element.nativeElement, attribute, value);
        }
        else {
            renderer.removeAttribute(element.nativeElement, attribute);
        }
    }
    /**
     * Creates a class observer on an element
     * @param element The element to observe
     * @param newClassValues The function to be called on change
     */
    static createObserver(element, newClassValues) {
        if (!element || !element.nativeElement) {
            return null;
        }
        let previousClassValue = [];
        const classValueCallback = () => {
            const classValue = element.nativeElement.getAttribute('class') || '';
            const classValueArray = classValue.split(' ')
                .filter(v => !!v && observerClassExceptions.indexOf(v) === -1);
            newClassValues(classValueArray, previousClassValue);
            previousClassValue = classValueArray;
        };
        const classObserver = new MutationObserver(classValueCallback);
        classObserver.observe(element.nativeElement, {
            attributeFilter: ['class'],
            attributes: true
        });
        classValueCallback();
        return classObserver;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXR0cmlidXRlLWhlbHBlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nLW1ldHJvNC8iLCJzb3VyY2VzIjpbImxpYi9oZWxwZXIvYXR0cmlidXRlLWhlbHBlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUMsdUJBQXVCLEVBQUMsTUFBTSxTQUFTLENBQUM7QUFFaEQsTUFBTSxPQUFPLGVBQWU7SUFDMUI7Ozs7OztPQU1HO0lBQ0ksTUFBTSxDQUFDLFlBQVksQ0FBQyxRQUFtQixFQUFFLE9BQW1CLEVBQUUsU0FBaUIsRUFBRSxLQUFXO1FBQ2pHLElBQUksS0FBSyxFQUFFO1lBQ1QsUUFBUSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsYUFBYSxFQUFFLFNBQVMsRUFBRSxLQUFLLENBQUMsQ0FBQztTQUNoRTthQUFNO1lBQ0wsUUFBUSxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsYUFBYSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1NBQzVEO0lBQ0gsQ0FBQztJQUVEOzs7O09BSUc7SUFDSSxNQUFNLENBQUMsY0FBYyxDQUFDLE9BQW1CLEVBQ25CLGNBQTRFO1FBQ3ZHLElBQUksQ0FBQyxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxFQUFFO1lBQ3RDLE9BQU8sSUFBSSxDQUFDO1NBQ2I7UUFFRCxJQUFJLGtCQUFrQixHQUFhLEVBQUUsQ0FBQztRQUN0QyxNQUFNLGtCQUFrQixHQUFHLEdBQUcsRUFBRTtZQUM5QixNQUFNLFVBQVUsR0FBVyxPQUFPLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDN0UsTUFBTSxlQUFlLEdBQWEsVUFBVSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUM7aUJBQ3BELE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksdUJBQXVCLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDakUsY0FBYyxDQUFDLGVBQWUsRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO1lBQ3BELGtCQUFrQixHQUFHLGVBQWUsQ0FBQztRQUN2QyxDQUFDLENBQUM7UUFDRixNQUFNLGFBQWEsR0FBRyxJQUFJLGdCQUFnQixDQUFDLGtCQUFrQixDQUFDLENBQUM7UUFFL0QsYUFBYSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsYUFBYSxFQUFFO1lBQzNDLGVBQWUsRUFBRSxDQUFDLE9BQU8sQ0FBQztZQUMxQixVQUFVLEVBQUUsSUFBSTtTQUNqQixDQUFDLENBQUM7UUFFSCxrQkFBa0IsRUFBRSxDQUFDO1FBQ3JCLE9BQU8sYUFBYSxDQUFDO0lBQ3ZCLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RWxlbWVudFJlZiwgUmVuZGVyZXIyfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHtvYnNlcnZlckNsYXNzRXhjZXB0aW9uc30gZnJvbSAnLi9saXN0cyc7XHJcblxyXG5leHBvcnQgY2xhc3MgQXR0cmlidXRlSGVscGVyIHtcclxuICAvKipcclxuICAgKiBTZXRzIGFuIGF0dHJpYnV0ZSB0byB0aGUgZWxlbWVudCBvciByZW1vdmVzIHRoZSBhdHRyaWJ1dGUgaWYgbm8gdmFsdWUgaXMgZ2l2ZW5cclxuICAgKiBAcGFyYW0gcmVuZGVyZXIgVGhlIHJlbmRlcmVyXHJcbiAgICogQHBhcmFtIGVsZW1lbnQgVGhlIGVsZW1lbnRcclxuICAgKiBAcGFyYW0gYXR0cmlidXRlIFRoZSBhdHRyaWJ1dGVcclxuICAgKiBAcGFyYW0gdmFsdWUgVGhlIG9wdGlvbmFsIHZhbHVlXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBzZXRBdHRyaWJ1dGUocmVuZGVyZXI6IFJlbmRlcmVyMiwgZWxlbWVudDogRWxlbWVudFJlZiwgYXR0cmlidXRlOiBzdHJpbmcsIHZhbHVlPzogYW55KSB7XHJcbiAgICBpZiAodmFsdWUpIHtcclxuICAgICAgcmVuZGVyZXIuc2V0QXR0cmlidXRlKGVsZW1lbnQubmF0aXZlRWxlbWVudCwgYXR0cmlidXRlLCB2YWx1ZSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZW5kZXJlci5yZW1vdmVBdHRyaWJ1dGUoZWxlbWVudC5uYXRpdmVFbGVtZW50LCBhdHRyaWJ1dGUpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ3JlYXRlcyBhIGNsYXNzIG9ic2VydmVyIG9uIGFuIGVsZW1lbnRcclxuICAgKiBAcGFyYW0gZWxlbWVudCBUaGUgZWxlbWVudCB0byBvYnNlcnZlXHJcbiAgICogQHBhcmFtIG5ld0NsYXNzVmFsdWVzIFRoZSBmdW5jdGlvbiB0byBiZSBjYWxsZWQgb24gY2hhbmdlXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBjcmVhdGVPYnNlcnZlcihlbGVtZW50OiBFbGVtZW50UmVmLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3Q2xhc3NWYWx1ZXM6IChuZXdDbGFzc1ZhbHVlczogc3RyaW5nW10sIG9sZENsYXNzVmFsdWVzOiBzdHJpbmdbXSkgPT4gdm9pZCk6IE11dGF0aW9uT2JzZXJ2ZXIge1xyXG4gICAgaWYgKCFlbGVtZW50IHx8ICFlbGVtZW50Lm5hdGl2ZUVsZW1lbnQpIHtcclxuICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IHByZXZpb3VzQ2xhc3NWYWx1ZTogc3RyaW5nW10gPSBbXTtcclxuICAgIGNvbnN0IGNsYXNzVmFsdWVDYWxsYmFjayA9ICgpID0+IHtcclxuICAgICAgY29uc3QgY2xhc3NWYWx1ZTogc3RyaW5nID0gZWxlbWVudC5uYXRpdmVFbGVtZW50LmdldEF0dHJpYnV0ZSgnY2xhc3MnKSB8fCAnJztcclxuICAgICAgY29uc3QgY2xhc3NWYWx1ZUFycmF5OiBzdHJpbmdbXSA9IGNsYXNzVmFsdWUuc3BsaXQoJyAnKVxyXG4gICAgICAgIC5maWx0ZXIodiA9PiAhIXYgJiYgb2JzZXJ2ZXJDbGFzc0V4Y2VwdGlvbnMuaW5kZXhPZih2KSA9PT0gLTEpO1xyXG4gICAgICBuZXdDbGFzc1ZhbHVlcyhjbGFzc1ZhbHVlQXJyYXksIHByZXZpb3VzQ2xhc3NWYWx1ZSk7XHJcbiAgICAgIHByZXZpb3VzQ2xhc3NWYWx1ZSA9IGNsYXNzVmFsdWVBcnJheTtcclxuICAgIH07XHJcbiAgICBjb25zdCBjbGFzc09ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoY2xhc3NWYWx1ZUNhbGxiYWNrKTtcclxuXHJcbiAgICBjbGFzc09ic2VydmVyLm9ic2VydmUoZWxlbWVudC5uYXRpdmVFbGVtZW50LCB7XHJcbiAgICAgIGF0dHJpYnV0ZUZpbHRlcjogWydjbGFzcyddLFxyXG4gICAgICBhdHRyaWJ1dGVzOiB0cnVlXHJcbiAgICB9KTtcclxuXHJcbiAgICBjbGFzc1ZhbHVlQ2FsbGJhY2soKTtcclxuICAgIHJldHVybiBjbGFzc09ic2VydmVyO1xyXG4gIH1cclxufVxyXG4iXX0=