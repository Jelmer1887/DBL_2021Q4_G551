import { __decorate, __metadata } from "tslib";
import { ChangeDetectionStrategy, Component, ContentChild, ElementRef, ViewChild } from '@angular/core';
import { PopoverDirective } from './popover.directive';
import { asapScheduler } from 'rxjs';
let PopoverComponent = class PopoverComponent {
    ngAfterViewInit() {
        asapScheduler.schedule(() => {
            this.popover.popoverObj.options.onPopoverShow = () => {
                if (this.popover.popoverObj.popover) {
                    $(this.content.nativeElement).children().appendTo(this.popover.popoverObj.popover.find('.popover-content'));
                    this.popover.popoverObj.size = Metro.utils.hiddenElementSize(this.popover.popoverObj.popover);
                    this.popover.popoverObj.setPosition();
                }
            };
            this.popover.popoverObj.options.onPopoverHide = () => {
                asapScheduler.schedule(() => {
                    if (this.popover.popoverObj && this.popover.popoverObj.popover) {
                        this.popover.popoverObj.popover.find('.popover-content').children().appendTo($(this.content.nativeElement));
                    }
                }, 300);
            };
        }, 1);
    }
};
__decorate([
    ContentChild(PopoverDirective, { static: true }),
    __metadata("design:type", PopoverDirective)
], PopoverComponent.prototype, "popover", void 0);
__decorate([
    ViewChild('popoverContent', { static: true }),
    __metadata("design:type", ElementRef)
], PopoverComponent.prototype, "content", void 0);
PopoverComponent = __decorate([
    Component({
        selector: 'm4-popover',
        template: "<ng-content></ng-content>\r\n\r\n<div class=\"m4-popover-content\" #popoverContent>\r\n  <ng-content select=\"[content]\"></ng-content>\r\n</div>\r\n",
        changeDetection: ChangeDetectionStrategy.OnPush,
        styles: [".m4-popover-content{display:none}"]
    })
], PopoverComponent);
export { PopoverComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9wb3Zlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZy1tZXRybzQvIiwic291cmNlcyI6WyJsaWIvY29udHJvbHMvcG9wb3Zlci9wb3BvdmVyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFnQix1QkFBdUIsRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDckgsT0FBTyxFQUFDLGdCQUFnQixFQUFDLE1BQU0scUJBQXFCLENBQUM7QUFDckQsT0FBTyxFQUFDLGFBQWEsRUFBQyxNQUFNLE1BQU0sQ0FBQztBQVduQyxJQUFhLGdCQUFnQixHQUE3QixNQUFhLGdCQUFnQjtJQUkzQixlQUFlO1FBQ2IsYUFBYSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUU7WUFDMUIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLGFBQWEsR0FBRyxHQUFHLEVBQUU7Z0JBQ25ELElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsT0FBTyxFQUFFO29CQUNuQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUM7b0JBRTVHLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDO29CQUM5RixJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxXQUFXLEVBQUUsQ0FBQztpQkFDdkM7WUFDSCxDQUFDLENBQUM7WUFFRixJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsYUFBYSxHQUFHLEdBQUcsRUFBRTtnQkFDbkQsYUFBYSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUU7b0JBQzFCLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsT0FBTyxFQUFFO3dCQUM5RCxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7cUJBQzdHO2dCQUNILENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztZQUNWLENBQUMsQ0FBQztRQUNKLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNSLENBQUM7Q0FDRixDQUFBO0FBdkJtRDtJQUFqRCxZQUFZLENBQUMsZ0JBQWdCLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUM7OEJBQVUsZ0JBQWdCO2lEQUFDO0FBQzdCO0lBQTlDLFNBQVMsQ0FBQyxnQkFBZ0IsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsQ0FBQzs4QkFBVSxVQUFVO2lEQUFDO0FBRnhELGdCQUFnQjtJQU41QixTQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUsWUFBWTtRQUN0QixpS0FBdUM7UUFFdkMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07O0tBQ2hELENBQUM7R0FDVyxnQkFBZ0IsQ0F3QjVCO1NBeEJZLGdCQUFnQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7QWZ0ZXJWaWV3SW5pdCwgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCwgQ29udGVudENoaWxkLCBFbGVtZW50UmVmLCBWaWV3Q2hpbGR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge1BvcG92ZXJEaXJlY3RpdmV9IGZyb20gJy4vcG9wb3Zlci5kaXJlY3RpdmUnO1xyXG5pbXBvcnQge2FzYXBTY2hlZHVsZXJ9IGZyb20gJ3J4anMnO1xyXG5cclxuZGVjbGFyZSB2YXIgJDogYW55O1xyXG5kZWNsYXJlIHZhciBNZXRybzogYW55O1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdtNC1wb3BvdmVyJyxcclxuICB0ZW1wbGF0ZVVybDogJy4vcG9wb3Zlci5jb21wb25lbnQuaHRtbCcsXHJcbiAgc3R5bGVVcmxzOiBbJy4vcG9wb3Zlci5jb21wb25lbnQuY3NzJ10sXHJcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2hcclxufSlcclxuZXhwb3J0IGNsYXNzIFBvcG92ZXJDb21wb25lbnQgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0IHtcclxuICBAQ29udGVudENoaWxkKFBvcG92ZXJEaXJlY3RpdmUsIHsgc3RhdGljOiB0cnVlIH0pIHBvcG92ZXI6IFBvcG92ZXJEaXJlY3RpdmU7XHJcbiAgQFZpZXdDaGlsZCgncG9wb3ZlckNvbnRlbnQnLCB7IHN0YXRpYzogdHJ1ZSB9KSBjb250ZW50OiBFbGVtZW50UmVmO1xyXG5cclxuICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZCB7XHJcbiAgICBhc2FwU2NoZWR1bGVyLnNjaGVkdWxlKCgpID0+IHtcclxuICAgICAgdGhpcy5wb3BvdmVyLnBvcG92ZXJPYmoub3B0aW9ucy5vblBvcG92ZXJTaG93ID0gKCkgPT4ge1xyXG4gICAgICAgIGlmICh0aGlzLnBvcG92ZXIucG9wb3Zlck9iai5wb3BvdmVyKSB7XHJcbiAgICAgICAgICAkKHRoaXMuY29udGVudC5uYXRpdmVFbGVtZW50KS5jaGlsZHJlbigpLmFwcGVuZFRvKHRoaXMucG9wb3Zlci5wb3BvdmVyT2JqLnBvcG92ZXIuZmluZCgnLnBvcG92ZXItY29udGVudCcpKTtcclxuXHJcbiAgICAgICAgICB0aGlzLnBvcG92ZXIucG9wb3Zlck9iai5zaXplID0gTWV0cm8udXRpbHMuaGlkZGVuRWxlbWVudFNpemUodGhpcy5wb3BvdmVyLnBvcG92ZXJPYmoucG9wb3Zlcik7XHJcbiAgICAgICAgICB0aGlzLnBvcG92ZXIucG9wb3Zlck9iai5zZXRQb3NpdGlvbigpO1xyXG4gICAgICAgIH1cclxuICAgICAgfTtcclxuXHJcbiAgICAgIHRoaXMucG9wb3Zlci5wb3BvdmVyT2JqLm9wdGlvbnMub25Qb3BvdmVySGlkZSA9ICgpID0+IHtcclxuICAgICAgICBhc2FwU2NoZWR1bGVyLnNjaGVkdWxlKCgpID0+IHtcclxuICAgICAgICAgIGlmICh0aGlzLnBvcG92ZXIucG9wb3Zlck9iaiAmJiB0aGlzLnBvcG92ZXIucG9wb3Zlck9iai5wb3BvdmVyKSB7XHJcbiAgICAgICAgICAgIHRoaXMucG9wb3Zlci5wb3BvdmVyT2JqLnBvcG92ZXIuZmluZCgnLnBvcG92ZXItY29udGVudCcpLmNoaWxkcmVuKCkuYXBwZW5kVG8oJCh0aGlzLmNvbnRlbnQubmF0aXZlRWxlbWVudCkpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0sIDMwMCk7XHJcbiAgICAgIH07XHJcbiAgICB9LCAxKTtcclxuICB9XHJcbn1cclxuIl19