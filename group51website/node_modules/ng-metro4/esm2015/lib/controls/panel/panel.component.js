import { __decorate, __metadata } from "tslib";
import { ChangeDetectionStrategy, Component, ElementRef, Input, ViewChild } from '@angular/core';
import { asapScheduler } from 'rxjs';
import { ObjectHelper } from '../../helper/object-helper';
let PanelComponent = class PanelComponent {
    constructor() { }
    createElement() {
        asapScheduler.schedule(() => {
            const originalElement = $(this.panel.nativeElement);
            ObjectHelper.hide(originalElement);
            if (this.clonedElement) {
                this.clonedElement.children().appendTo(originalElement);
                this.clonedElement.parent().remove();
            }
            this.clonedElement = originalElement.clone();
            originalElement.children().appendTo(this.clonedElement);
            ObjectHelper.show(this.clonedElement);
            originalElement.parent().append(this.clonedElement);
            this.panelObj = this.clonedElement.panel({
                customButtons: this.customButtons
            }).data('panel');
        });
    }
    ngOnInit() {
        this.createElement();
    }
    ngOnChanges(changes) {
        this.createElement();
    }
};
__decorate([
    Input(),
    __metadata("design:type", Number)
], PanelComponent.prototype, "width", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], PanelComponent.prototype, "height", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], PanelComponent.prototype, "title", void 0);
__decorate([
    Input('title-icon'),
    __metadata("design:type", String)
], PanelComponent.prototype, "titleIcon", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], PanelComponent.prototype, "collapsible", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], PanelComponent.prototype, "collapsed", void 0);
__decorate([
    Input('custom-buttons'),
    __metadata("design:type", Array)
], PanelComponent.prototype, "customButtons", void 0);
__decorate([
    Input('cls-panel'),
    __metadata("design:type", String)
], PanelComponent.prototype, "clsPanel", void 0);
__decorate([
    Input('cls-title'),
    __metadata("design:type", String)
], PanelComponent.prototype, "clsTitle", void 0);
__decorate([
    Input('cls-title-caption'),
    __metadata("design:type", String)
], PanelComponent.prototype, "clsTitleCaption", void 0);
__decorate([
    Input('cls-title-icon'),
    __metadata("design:type", String)
], PanelComponent.prototype, "clsTitleIcon", void 0);
__decorate([
    Input('cls-content'),
    __metadata("design:type", String)
], PanelComponent.prototype, "clsContent", void 0);
__decorate([
    Input('cls-collapse-toggle'),
    __metadata("design:type", String)
], PanelComponent.prototype, "clsCollapseToggle", void 0);
__decorate([
    ViewChild('panel', { static: true }),
    __metadata("design:type", ElementRef)
], PanelComponent.prototype, "panel", void 0);
PanelComponent = __decorate([
    Component({
        selector: 'm4-panel',
        template: "<div #panel\r\n     [attr.data-width]=\"width\"\r\n     [attr.data-height]=\"height\"\r\n     [attr.data-title-caption]=\"title\"\r\n     [attr.data-title-icon]=\"titleIcon\"\r\n     [attr.data-collapsible]=\"collapsible\"\r\n     [attr.data-collapsed]=\"collapsed\"\r\n\r\n     [attr.data-cls-panel]=\"clsPanel\"\r\n     [attr.data-cls-title]=\"clsTitle\"\r\n     [attr.data-cls-title-caption]=\"clsTitleCaption\"\r\n     [attr.data-cls-title-icon]=\"clsTitleIcon\"\r\n     [attr.data-cls-content]=\"clsContent\"\r\n     [attr.data-cls-collapse-toggle]=\"clsCollapseToggle\">\r\n  <ng-content></ng-content>\r\n</div>\r\n",
        changeDetection: ChangeDetectionStrategy.OnPush,
        styles: [""]
    }),
    __metadata("design:paramtypes", [])
], PanelComponent);
export { PanelComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFuZWwuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctbWV0cm80LyIsInNvdXJjZXMiOlsibGliL2NvbnRyb2xzL3BhbmVsL3BhbmVsLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFDLHVCQUF1QixFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFvQyxTQUFTLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDakksT0FBTyxFQUFDLGFBQWEsRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUNuQyxPQUFPLEVBQUMsWUFBWSxFQUFDLE1BQU0sNEJBQTRCLENBQUM7QUFVeEQsSUFBYSxjQUFjLEdBQTNCLE1BQWEsY0FBYztJQW9CekIsZ0JBQWdCLENBQUM7SUFFakIsYUFBYTtRQUNYLGFBQWEsQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFO1lBQzFCLE1BQU0sZUFBZSxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBQ3BELFlBQVksQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7WUFFbkMsSUFBSSxJQUFJLENBQUMsYUFBYSxFQUFFO2dCQUN0QixJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsRUFBRSxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsQ0FBQztnQkFDeEQsSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQzthQUN0QztZQUVELElBQUksQ0FBQyxhQUFhLEdBQUcsZUFBZSxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQzdDLGVBQWUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBQ3hELFlBQVksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBQ3RDLGVBQWUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBRXBELElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUM7Z0JBQ3ZDLGFBQWEsRUFBRSxJQUFJLENBQUMsYUFBYTthQUNsQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ25CLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELFFBQVE7UUFDTixJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDdkIsQ0FBQztJQUVELFdBQVcsQ0FBQyxPQUFzQjtRQUNoQyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDdkIsQ0FBQztDQUNGLENBQUE7QUFqRFU7SUFBUixLQUFLLEVBQUU7OzZDQUFlO0FBQ2Q7SUFBUixLQUFLLEVBQUU7OzhDQUFnQjtBQUNmO0lBQVIsS0FBSyxFQUFFOzs2Q0FBZTtBQUNGO0lBQXBCLEtBQUssQ0FBQyxZQUFZLENBQUM7O2lEQUFtQjtBQUM5QjtJQUFSLEtBQUssRUFBRTs7bURBQXNCO0FBQ3JCO0lBQVIsS0FBSyxFQUFFOztpREFBb0I7QUFDSDtJQUF4QixLQUFLLENBQUMsZ0JBQWdCLENBQUM7O3FEQUFpRTtBQUVyRTtJQUFuQixLQUFLLENBQUMsV0FBVyxDQUFDOztnREFBa0I7QUFDakI7SUFBbkIsS0FBSyxDQUFDLFdBQVcsQ0FBQzs7Z0RBQWtCO0FBQ1Q7SUFBM0IsS0FBSyxDQUFDLG1CQUFtQixDQUFDOzt1REFBeUI7QUFDM0I7SUFBeEIsS0FBSyxDQUFDLGdCQUFnQixDQUFDOztvREFBc0I7QUFDeEI7SUFBckIsS0FBSyxDQUFDLGFBQWEsQ0FBQzs7a0RBQW9CO0FBQ1g7SUFBN0IsS0FBSyxDQUFDLHFCQUFxQixDQUFDOzt5REFBMkI7QUFFbEI7SUFBckMsU0FBUyxDQUFDLE9BQU8sRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsQ0FBQzs4QkFBUSxVQUFVOzZDQUFDO0FBaEI3QyxjQUFjO0lBTjFCLFNBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSxVQUFVO1FBQ3BCLHluQkFBcUM7UUFFckMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07O0tBQ2hELENBQUM7O0dBQ1csY0FBYyxDQWtEMUI7U0FsRFksY0FBYyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCwgRWxlbWVudFJlZiwgSW5wdXQsIE9uQ2hhbmdlcywgT25Jbml0LCBTaW1wbGVDaGFuZ2VzLCBWaWV3Q2hpbGR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge2FzYXBTY2hlZHVsZXJ9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQge09iamVjdEhlbHBlcn0gZnJvbSAnLi4vLi4vaGVscGVyL29iamVjdC1oZWxwZXInO1xyXG5cclxuZGVjbGFyZSB2YXIgJDogYW55O1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdtNC1wYW5lbCcsXHJcbiAgdGVtcGxhdGVVcmw6ICcuL3BhbmVsLmNvbXBvbmVudC5odG1sJyxcclxuICBzdHlsZVVybHM6IFsnLi9wYW5lbC5jb21wb25lbnQuY3NzJ10sXHJcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2hcclxufSlcclxuZXhwb3J0IGNsYXNzIFBhbmVsQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMge1xyXG4gIEBJbnB1dCgpIHdpZHRoOiBudW1iZXI7XHJcbiAgQElucHV0KCkgaGVpZ2h0OiBudW1iZXI7XHJcbiAgQElucHV0KCkgdGl0bGU6IHN0cmluZztcclxuICBASW5wdXQoJ3RpdGxlLWljb24nKSB0aXRsZUljb246IHN0cmluZztcclxuICBASW5wdXQoKSBjb2xsYXBzaWJsZTogYm9vbGVhbjtcclxuICBASW5wdXQoKSBjb2xsYXBzZWQ6IGJvb2xlYW47XHJcbiAgQElucHV0KCdjdXN0b20tYnV0dG9ucycpIGN1c3RvbUJ1dHRvbnM6IHsgaHRtbDogc3RyaW5nLCBjbHM6IHN0cmluZywgb25jbGljazogc3RyaW5nIH1bXTtcclxuXHJcbiAgQElucHV0KCdjbHMtcGFuZWwnKSBjbHNQYW5lbDogc3RyaW5nO1xyXG4gIEBJbnB1dCgnY2xzLXRpdGxlJykgY2xzVGl0bGU6IHN0cmluZztcclxuICBASW5wdXQoJ2Nscy10aXRsZS1jYXB0aW9uJykgY2xzVGl0bGVDYXB0aW9uOiBzdHJpbmc7XHJcbiAgQElucHV0KCdjbHMtdGl0bGUtaWNvbicpIGNsc1RpdGxlSWNvbjogc3RyaW5nO1xyXG4gIEBJbnB1dCgnY2xzLWNvbnRlbnQnKSBjbHNDb250ZW50OiBzdHJpbmc7XHJcbiAgQElucHV0KCdjbHMtY29sbGFwc2UtdG9nZ2xlJykgY2xzQ29sbGFwc2VUb2dnbGU6IHN0cmluZztcclxuXHJcbiAgQFZpZXdDaGlsZCgncGFuZWwnLCB7IHN0YXRpYzogdHJ1ZSB9KSBwYW5lbDogRWxlbWVudFJlZjtcclxuICBwcml2YXRlIGNsb25lZEVsZW1lbnQ6IGFueTtcclxuICBwYW5lbE9iajogYW55O1xyXG5cclxuICBjb25zdHJ1Y3RvcigpIHsgfVxyXG5cclxuICBjcmVhdGVFbGVtZW50KCkge1xyXG4gICAgYXNhcFNjaGVkdWxlci5zY2hlZHVsZSgoKSA9PiB7XHJcbiAgICAgIGNvbnN0IG9yaWdpbmFsRWxlbWVudCA9ICQodGhpcy5wYW5lbC5uYXRpdmVFbGVtZW50KTtcclxuICAgICAgT2JqZWN0SGVscGVyLmhpZGUob3JpZ2luYWxFbGVtZW50KTtcclxuXHJcbiAgICAgIGlmICh0aGlzLmNsb25lZEVsZW1lbnQpIHtcclxuICAgICAgICB0aGlzLmNsb25lZEVsZW1lbnQuY2hpbGRyZW4oKS5hcHBlbmRUbyhvcmlnaW5hbEVsZW1lbnQpO1xyXG4gICAgICAgIHRoaXMuY2xvbmVkRWxlbWVudC5wYXJlbnQoKS5yZW1vdmUoKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgdGhpcy5jbG9uZWRFbGVtZW50ID0gb3JpZ2luYWxFbGVtZW50LmNsb25lKCk7XHJcbiAgICAgIG9yaWdpbmFsRWxlbWVudC5jaGlsZHJlbigpLmFwcGVuZFRvKHRoaXMuY2xvbmVkRWxlbWVudCk7XHJcbiAgICAgIE9iamVjdEhlbHBlci5zaG93KHRoaXMuY2xvbmVkRWxlbWVudCk7XHJcbiAgICAgIG9yaWdpbmFsRWxlbWVudC5wYXJlbnQoKS5hcHBlbmQodGhpcy5jbG9uZWRFbGVtZW50KTtcclxuXHJcbiAgICAgIHRoaXMucGFuZWxPYmogPSB0aGlzLmNsb25lZEVsZW1lbnQucGFuZWwoe1xyXG4gICAgICAgIGN1c3RvbUJ1dHRvbnM6IHRoaXMuY3VzdG9tQnV0dG9uc1xyXG4gICAgICB9KS5kYXRhKCdwYW5lbCcpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBuZ09uSW5pdCgpIHtcclxuICAgIHRoaXMuY3JlYXRlRWxlbWVudCgpO1xyXG4gIH1cclxuXHJcbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQge1xyXG4gICAgdGhpcy5jcmVhdGVFbGVtZW50KCk7XHJcbiAgfVxyXG59XHJcbiJdfQ==