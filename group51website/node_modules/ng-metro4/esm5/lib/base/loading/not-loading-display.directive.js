import { __decorate, __metadata } from "tslib";
import { Directive, ElementRef, Input, OnDestroy, TemplateRef, ViewContainerRef } from '@angular/core';
import { LoadingDirective } from './loading.directive';
var NotLoadingDisplayDirective = /** @class */ (function () {
    function NotLoadingDisplayDirective(element, templateRef, viewContainer, loadingDirective) {
        var _this = this;
        this.element = element;
        this.templateRef = templateRef;
        this.viewContainer = viewContainer;
        this.loadingDirective = loadingDirective;
        this.subscription = this.loadingDirective.stateChange.subscribe(function (loading) {
            _this.loadingState = loading;
            _this.updateView();
        });
    }
    Object.defineProperty(NotLoadingDisplayDirective.prototype, "notLoading", {
        set: function (val) {
            this.conditionValue = val;
            this.updateView();
        },
        enumerable: true,
        configurable: true
    });
    NotLoadingDisplayDirective.prototype.updateView = function () {
        this.viewContainer.clear();
        if (!this.loadingState || this.conditionValue) {
            this.viewContainer.createEmbeddedView(this.templateRef);
        }
    };
    NotLoadingDisplayDirective.prototype.ngOnDestroy = function () {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    };
    NotLoadingDisplayDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: TemplateRef },
        { type: ViewContainerRef },
        { type: LoadingDirective }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], NotLoadingDisplayDirective.prototype, "notLoading", null);
    NotLoadingDisplayDirective = __decorate([
        Directive({
            selector: '[notLoading]'
        }),
        __metadata("design:paramtypes", [ElementRef,
            TemplateRef,
            ViewContainerRef,
            LoadingDirective])
    ], NotLoadingDisplayDirective);
    return NotLoadingDisplayDirective;
}());
export { NotLoadingDisplayDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90LWxvYWRpbmctZGlzcGxheS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZy1tZXRybzQvIiwic291cmNlcyI6WyJsaWIvYmFzZS9sb2FkaW5nL25vdC1sb2FkaW5nLWRpc3BsYXkuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxnQkFBZ0IsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNyRyxPQUFPLEVBQUMsZ0JBQWdCLEVBQUMsTUFBTSxxQkFBcUIsQ0FBQztBQU1yRDtJQVdFLG9DQUFvQixPQUFtQixFQUNuQixXQUE2QixFQUM3QixhQUErQixFQUMvQixnQkFBa0M7UUFIdEQsaUJBUUM7UUFSbUIsWUFBTyxHQUFQLE9BQU8sQ0FBWTtRQUNuQixnQkFBVyxHQUFYLFdBQVcsQ0FBa0I7UUFDN0Isa0JBQWEsR0FBYixhQUFhLENBQWtCO1FBQy9CLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7UUFDcEQsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxVQUFDLE9BQWdCO1lBQy9FLEtBQUksQ0FBQyxZQUFZLEdBQUcsT0FBTyxDQUFDO1lBQzVCLEtBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUNwQixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFiRCxzQkFBSSxrREFBVTthQUFkLFVBQWUsR0FBRztZQUNoQixJQUFJLENBQUMsY0FBYyxHQUFHLEdBQUcsQ0FBQztZQUMxQixJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDcEIsQ0FBQzs7O09BQUE7SUFZTywrQ0FBVSxHQUFsQjtRQUNFLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxFQUFFLENBQUM7UUFFM0IsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLElBQUksSUFBSSxDQUFDLGNBQWMsRUFBRTtZQUM3QyxJQUFJLENBQUMsYUFBYSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztTQUN6RDtJQUNILENBQUM7SUFFRCxnREFBVyxHQUFYO1FBQ0UsSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFO1lBQ3JCLElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxFQUFFLENBQUM7U0FDakM7SUFDSCxDQUFDOztnQkF0QjRCLFVBQVU7Z0JBQ04sV0FBVztnQkFDVCxnQkFBZ0I7Z0JBQ2IsZ0JBQWdCOztJQVJ0RDtRQURDLEtBQUssRUFBRTs7O2dFQUlQO0lBVFUsMEJBQTBCO1FBSHRDLFNBQVMsQ0FBQztZQUNULFFBQVEsRUFBRSxjQUFjO1NBQ3pCLENBQUM7eUNBWTZCLFVBQVU7WUFDTixXQUFXO1lBQ1QsZ0JBQWdCO1lBQ2IsZ0JBQWdCO09BZDNDLDBCQUEwQixDQWtDdEM7SUFBRCxpQ0FBQztDQUFBLEFBbENELElBa0NDO1NBbENZLDBCQUEwQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RGlyZWN0aXZlLCBFbGVtZW50UmVmLCBJbnB1dCwgT25EZXN0cm95LCBUZW1wbGF0ZVJlZiwgVmlld0NvbnRhaW5lclJlZn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7TG9hZGluZ0RpcmVjdGl2ZX0gZnJvbSAnLi9sb2FkaW5nLmRpcmVjdGl2ZSc7XHJcbmltcG9ydCB7U3Vic2NyaXB0aW9ufSBmcm9tICdyeGpzJztcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gIHNlbGVjdG9yOiAnW25vdExvYWRpbmddJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgTm90TG9hZGluZ0Rpc3BsYXlEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xyXG4gIHByaXZhdGUgc3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb247XHJcbiAgcHJpdmF0ZSBsb2FkaW5nU3RhdGU6IGJvb2xlYW47XHJcbiAgcHJpdmF0ZSBjb25kaXRpb25WYWx1ZTogYW55O1xyXG5cclxuICBASW5wdXQoKVxyXG4gIHNldCBub3RMb2FkaW5nKHZhbCkge1xyXG4gICAgdGhpcy5jb25kaXRpb25WYWx1ZSA9IHZhbDtcclxuICAgIHRoaXMudXBkYXRlVmlldygpO1xyXG4gIH1cclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbGVtZW50OiBFbGVtZW50UmVmLFxyXG4gICAgICAgICAgICAgIHByaXZhdGUgdGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmPGFueT4sXHJcbiAgICAgICAgICAgICAgcHJpdmF0ZSB2aWV3Q29udGFpbmVyOiBWaWV3Q29udGFpbmVyUmVmLFxyXG4gICAgICAgICAgICAgIHByaXZhdGUgbG9hZGluZ0RpcmVjdGl2ZTogTG9hZGluZ0RpcmVjdGl2ZSkge1xyXG4gICAgdGhpcy5zdWJzY3JpcHRpb24gPSB0aGlzLmxvYWRpbmdEaXJlY3RpdmUuc3RhdGVDaGFuZ2Uuc3Vic2NyaWJlKChsb2FkaW5nOiBib29sZWFuKSA9PiB7XHJcbiAgICAgIHRoaXMubG9hZGluZ1N0YXRlID0gbG9hZGluZztcclxuICAgICAgdGhpcy51cGRhdGVWaWV3KCk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgdXBkYXRlVmlldygpIHtcclxuICAgIHRoaXMudmlld0NvbnRhaW5lci5jbGVhcigpO1xyXG5cclxuICAgIGlmICghdGhpcy5sb2FkaW5nU3RhdGUgfHwgdGhpcy5jb25kaXRpb25WYWx1ZSkge1xyXG4gICAgICB0aGlzLnZpZXdDb250YWluZXIuY3JlYXRlRW1iZWRkZWRWaWV3KHRoaXMudGVtcGxhdGVSZWYpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XHJcbiAgICBpZiAodGhpcy5zdWJzY3JpcHRpb24pIHtcclxuICAgICAgdGhpcy5zdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIl19