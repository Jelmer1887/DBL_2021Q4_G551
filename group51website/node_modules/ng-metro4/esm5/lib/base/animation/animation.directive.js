import { __decorate, __metadata } from "tslib";
import { Directive, ElementRef, Input, OnChanges, OnInit, SimpleChanges } from '@angular/core';
var AnimationDirective = /** @class */ (function () {
    function AnimationDirective(element) {
        this.element = element;
        this.oldClasses = [];
        this.jElement = $(this.element.nativeElement);
    }
    AnimationDirective.prototype.createElement = function () {
        var _this = this;
        var newClasses = ["ani-" + (this.hover ? 'hover-' : '') + this.animation];
        this.oldClasses.forEach(function (c) {
            _this.jElement.removeClass(c);
        });
        newClasses.forEach(function (c) {
            _this.jElement.addClass(c);
        });
        this.oldClasses = newClasses;
    };
    AnimationDirective.prototype.ngOnInit = function () {
        this.createElement();
    };
    AnimationDirective.prototype.ngOnChanges = function (changes) {
        this.createElement();
    };
    AnimationDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    __decorate([
        Input('m4-animation'),
        __metadata("design:type", String)
    ], AnimationDirective.prototype, "animation", void 0);
    __decorate([
        Input('animation-hover'),
        __metadata("design:type", Boolean)
    ], AnimationDirective.prototype, "hover", void 0);
    AnimationDirective = __decorate([
        Directive({
            selector: '[m4-animation]'
        }),
        __metadata("design:paramtypes", [ElementRef])
    ], AnimationDirective);
    return AnimationDirective;
}());
export { AnimationDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5pbWF0aW9uLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nLW1ldHJvNC8iLCJzb3VyY2VzIjpbImxpYi9iYXNlL2FuaW1hdGlvbi9hbmltYXRpb24uZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxhQUFhLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFRN0Y7SUFPRSw0QkFBb0IsT0FBbUI7UUFBbkIsWUFBTyxHQUFQLE9BQU8sQ0FBWTtRQUYvQixlQUFVLEdBQWEsRUFBRSxDQUFDO1FBR2hDLElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDaEQsQ0FBQztJQUVPLDBDQUFhLEdBQXJCO1FBQUEsaUJBVUM7UUFUQyxJQUFNLFVBQVUsR0FBRyxDQUFFLFVBQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUcsSUFBSSxDQUFDLFNBQVcsQ0FBRSxDQUFDO1FBRTVFLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLFVBQUEsQ0FBQztZQUN2QixLQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMvQixDQUFDLENBQUMsQ0FBQztRQUNILFVBQVUsQ0FBQyxPQUFPLENBQUMsVUFBQSxDQUFDO1lBQ2xCLEtBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzVCLENBQUMsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7SUFDL0IsQ0FBQztJQUVELHFDQUFRLEdBQVI7UUFDRSxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDdkIsQ0FBQztJQUVELHdDQUFXLEdBQVgsVUFBWSxPQUFzQjtRQUNoQyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDdkIsQ0FBQzs7Z0JBdEI0QixVQUFVOztJQU5oQjtRQUF0QixLQUFLLENBQUMsY0FBYyxDQUFDOzt5REFBMEI7SUFDdEI7UUFBekIsS0FBSyxDQUFDLGlCQUFpQixDQUFDOztxREFBZ0I7SUFGOUIsa0JBQWtCO1FBSDlCLFNBQVMsQ0FBQztZQUNULFFBQVEsRUFBRSxnQkFBZ0I7U0FDM0IsQ0FBQzt5Q0FRNkIsVUFBVTtPQVA1QixrQkFBa0IsQ0E4QjlCO0lBQUQseUJBQUM7Q0FBQSxBQTlCRCxJQThCQztTQTlCWSxrQkFBa0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0RpcmVjdGl2ZSwgRWxlbWVudFJlZiwgSW5wdXQsIE9uQ2hhbmdlcywgT25Jbml0LCBTaW1wbGVDaGFuZ2VzfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHtBbmltYXRpb25UeXBlfSBmcm9tICcuLi8uLi9oZWxwZXIvdHlwZXMnO1xyXG5cclxuZGVjbGFyZSB2YXIgJDogYW55O1xyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgc2VsZWN0b3I6ICdbbTQtYW5pbWF0aW9uXSdcclxufSlcclxuZXhwb3J0IGNsYXNzIEFuaW1hdGlvbkRpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzIHtcclxuICBASW5wdXQoJ200LWFuaW1hdGlvbicpIGFuaW1hdGlvbjogQW5pbWF0aW9uVHlwZTtcclxuICBASW5wdXQoJ2FuaW1hdGlvbi1ob3ZlcicpIGhvdmVyOiBib29sZWFuO1xyXG5cclxuICBwcml2YXRlIGpFbGVtZW50OiBhbnk7XHJcbiAgcHJpdmF0ZSBvbGRDbGFzc2VzOiBzdHJpbmdbXSA9IFtdO1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsZW1lbnQ6IEVsZW1lbnRSZWYpIHtcclxuICAgIHRoaXMuakVsZW1lbnQgPSAkKHRoaXMuZWxlbWVudC5uYXRpdmVFbGVtZW50KTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgY3JlYXRlRWxlbWVudCgpIHtcclxuICAgIGNvbnN0IG5ld0NsYXNzZXMgPSBbIGBhbmktJHt0aGlzLmhvdmVyID8gJ2hvdmVyLScgOiAnJ30ke3RoaXMuYW5pbWF0aW9ufWAgXTtcclxuXHJcbiAgICB0aGlzLm9sZENsYXNzZXMuZm9yRWFjaChjID0+IHtcclxuICAgICAgdGhpcy5qRWxlbWVudC5yZW1vdmVDbGFzcyhjKTtcclxuICAgIH0pO1xyXG4gICAgbmV3Q2xhc3Nlcy5mb3JFYWNoKGMgPT4ge1xyXG4gICAgICB0aGlzLmpFbGVtZW50LmFkZENsYXNzKGMpO1xyXG4gICAgfSk7XHJcbiAgICB0aGlzLm9sZENsYXNzZXMgPSBuZXdDbGFzc2VzO1xyXG4gIH1cclxuXHJcbiAgbmdPbkluaXQoKTogdm9pZCB7XHJcbiAgICB0aGlzLmNyZWF0ZUVsZW1lbnQoKTtcclxuICB9XHJcblxyXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcclxuICAgIHRoaXMuY3JlYXRlRWxlbWVudCgpO1xyXG4gIH1cclxufVxyXG4iXX0=