import { __decorate, __metadata, __param } from "tslib";
import { ChangeDetectionStrategy, Component, ElementRef, Input, OnChanges, OnDestroy, OnInit, Optional, SimpleChanges } from '@angular/core';
import { AttributeHelper } from '../../helper/attribute-helper';
var IconComponent = /** @class */ (function () {
    function IconComponent(mainElement) {
        this.mainElement = mainElement;
        this.size = 0;
    }
    IconComponent.prototype.createElement = function () {
        var sizeClass = this.size === 0 ? '' : this.size === 1 ? ' mif-lg' : ' mif-' + this.size + 'x';
        this.elementClass = (this.class ? this.class + ' ' : '') + "mif-" + this.icon + sizeClass + (this.color ? ' fg-' + this.color : '');
    };
    IconComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.classObserver = AttributeHelper.createObserver(this.mainElement, function (newClasses, oldClasses) {
            _this.class = newClasses.join(' ');
            _this.createElement();
        });
        this.createElement();
    };
    IconComponent.prototype.ngOnChanges = function (changes) {
        this.createElement();
    };
    IconComponent.prototype.ngOnDestroy = function () {
        if (this.classObserver) {
            this.classObserver.disconnect();
        }
    };
    IconComponent.ctorParameters = function () { return [
        { type: ElementRef, decorators: [{ type: Optional }] }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], IconComponent.prototype, "icon", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], IconComponent.prototype, "size", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], IconComponent.prototype, "color", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], IconComponent.prototype, "class", void 0);
    IconComponent = __decorate([
        Component({
            selector: 'm4-icon',
            template: "<span [ngClass]=\"elementClass\"></span>\r\n",
            changeDetection: ChangeDetectionStrategy.Default,
            styles: [""]
        }),
        __param(0, Optional()),
        __metadata("design:paramtypes", [ElementRef])
    ], IconComponent);
    return IconComponent;
}());
export { IconComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWNvbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZy1tZXRybzQvIiwic291cmNlcyI6WyJsaWIvYmFzZS9pY29uL2ljb24uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLGFBQWEsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUUzSSxPQUFPLEVBQUMsZUFBZSxFQUFDLE1BQU0sK0JBQStCLENBQUM7QUFROUQ7SUFVRSx1QkFBZ0MsV0FBdUI7UUFBdkIsZ0JBQVcsR0FBWCxXQUFXLENBQVk7UUFSOUMsU0FBSSxHQUFnQixDQUFDLENBQUM7SUFRNEIsQ0FBQztJQUVwRCxxQ0FBYSxHQUFyQjtRQUNFLElBQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQztRQUNqRyxJQUFJLENBQUMsWUFBWSxHQUFHLENBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsYUFBTyxJQUFJLENBQUMsSUFBSSxHQUFHLFNBQVMsSUFBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFFLENBQUM7SUFDbEksQ0FBQztJQUVELGdDQUFRLEdBQVI7UUFBQSxpQkFPQztRQU5DLElBQUksQ0FBQyxhQUFhLEdBQUcsZUFBZSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLFVBQUMsVUFBVSxFQUFFLFVBQVU7WUFDM0YsS0FBSSxDQUFDLEtBQUssR0FBRyxVQUFVLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ2xDLEtBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUN2QixDQUFDLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUN2QixDQUFDO0lBRUQsbUNBQVcsR0FBWCxVQUFZLE9BQXNCO1FBQ2hDLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUN2QixDQUFDO0lBRUQsbUNBQVcsR0FBWDtRQUNFLElBQUksSUFBSSxDQUFDLGFBQWEsRUFBRTtZQUN0QixJQUFJLENBQUMsYUFBYSxDQUFDLFVBQVUsRUFBRSxDQUFDO1NBQ2pDO0lBQ0gsQ0FBQzs7Z0JBeEI0QyxVQUFVLHVCQUExQyxRQUFROztJQVRaO1FBQVIsS0FBSyxFQUFFOzsrQ0FBZ0I7SUFDZjtRQUFSLEtBQUssRUFBRTs7K0NBQXVCO0lBQ3RCO1FBQVIsS0FBSyxFQUFFOztnREFBa0I7SUFFakI7UUFBUixLQUFLLEVBQUU7O2dEQUFlO0lBTFosYUFBYTtRQU56QixTQUFTLENBQUM7WUFDVCxRQUFRLEVBQUUsU0FBUztZQUNuQix3REFBb0M7WUFFcEMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE9BQU87O1NBQ2pELENBQUM7UUFXYSxXQUFBLFFBQVEsRUFBRSxDQUFBO3lDQUFzQixVQUFVO09BVjVDLGFBQWEsQ0FtQ3pCO0lBQUQsb0JBQUM7Q0FBQSxBQW5DRCxJQW1DQztTQW5DWSxhQUFhIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBJbnB1dCwgT25DaGFuZ2VzLCBPbkRlc3Ryb3ksIE9uSW5pdCwgT3B0aW9uYWwsIFNpbXBsZUNoYW5nZXN9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge0NvbG9yVHlwZSwgSWNvblR5cGV9IGZyb20gJy4uLy4uL2hlbHBlci90eXBlcyc7XHJcbmltcG9ydCB7QXR0cmlidXRlSGVscGVyfSBmcm9tICcuLi8uLi9oZWxwZXIvYXR0cmlidXRlLWhlbHBlcic7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ200LWljb24nLFxyXG4gIHRlbXBsYXRlVXJsOiAnLi9pY29uLmNvbXBvbmVudC5odG1sJyxcclxuICBzdHlsZVVybHM6IFsnLi9pY29uLmNvbXBvbmVudC5jc3MnXSxcclxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5LkRlZmF1bHRcclxufSlcclxuZXhwb3J0IGNsYXNzIEljb25Db21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcywgT25EZXN0cm95IHtcclxuICBASW5wdXQoKSBpY29uOiBJY29uVHlwZTtcclxuICBASW5wdXQoKSBzaXplOiAwfDF8MnwzfDR8NSA9IDA7XHJcbiAgQElucHV0KCkgY29sb3I6IENvbG9yVHlwZTtcclxuXHJcbiAgQElucHV0KCkgY2xhc3M6IHN0cmluZztcclxuXHJcbiAgZWxlbWVudENsYXNzOiBzdHJpbmc7XHJcbiAgcHJpdmF0ZSBjbGFzc09ic2VydmVyOiBNdXRhdGlvbk9ic2VydmVyO1xyXG5cclxuICBjb25zdHJ1Y3RvcihAT3B0aW9uYWwoKSBwcml2YXRlIG1haW5FbGVtZW50OiBFbGVtZW50UmVmKSB7IH1cclxuXHJcbiAgcHJpdmF0ZSBjcmVhdGVFbGVtZW50KCkge1xyXG4gICAgY29uc3Qgc2l6ZUNsYXNzID0gdGhpcy5zaXplID09PSAwID8gJycgOiB0aGlzLnNpemUgPT09IDEgPyAnIG1pZi1sZycgOiAnIG1pZi0nICsgdGhpcy5zaXplICsgJ3gnO1xyXG4gICAgdGhpcy5lbGVtZW50Q2xhc3MgPSBgJHt0aGlzLmNsYXNzID8gdGhpcy5jbGFzcyArICcgJyA6ICcnfW1pZi0ke3RoaXMuaWNvbn0ke3NpemVDbGFzc30ke3RoaXMuY29sb3IgPyAnIGZnLScgKyB0aGlzLmNvbG9yIDogJyd9YDtcclxuICB9XHJcblxyXG4gIG5nT25Jbml0KCk6IHZvaWQge1xyXG4gICAgdGhpcy5jbGFzc09ic2VydmVyID0gQXR0cmlidXRlSGVscGVyLmNyZWF0ZU9ic2VydmVyKHRoaXMubWFpbkVsZW1lbnQsIChuZXdDbGFzc2VzLCBvbGRDbGFzc2VzKSA9PiB7XHJcbiAgICAgIHRoaXMuY2xhc3MgPSBuZXdDbGFzc2VzLmpvaW4oJyAnKTtcclxuICAgICAgdGhpcy5jcmVhdGVFbGVtZW50KCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLmNyZWF0ZUVsZW1lbnQoKTtcclxuICB9XHJcblxyXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcclxuICAgIHRoaXMuY3JlYXRlRWxlbWVudCgpO1xyXG4gIH1cclxuXHJcbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XHJcbiAgICBpZiAodGhpcy5jbGFzc09ic2VydmVyKSB7XHJcbiAgICAgIHRoaXMuY2xhc3NPYnNlcnZlci5kaXNjb25uZWN0KCk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiJdfQ==