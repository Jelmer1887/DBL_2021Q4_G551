import { __decorate, __metadata } from "tslib";
import { ApplicationRef, ComponentFactoryResolver, ComponentRef, EmbeddedViewRef, Injectable, Injector } from '@angular/core';
import { Subject } from 'rxjs';
import { finalize, startWith } from 'rxjs/operators';
import { FormBuilderComponent } from '../../form/form-builder/form-builder.component';
var DialogService = /** @class */ (function () {
    function DialogService(componentFactoryResolver, appRef, injector) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.appRef = appRef;
        this.injector = injector;
    }
    /**
     * Create a custom dialog
     * @param options The options of the dialog
     */
    DialogService.prototype.create = function (options) {
        return window.Metro.dialog.create(options);
    };
    /**
     * Close a created dialog
     * @param dialogObj The object returned by the create method
     */
    DialogService.prototype.close = function (dialogObj) {
        return window.Metro.dialog.close(dialogObj);
    };
    /**
     * Shows an alert dialog
     * @param title The title of the dialog
     * @param message The message of the dialog
     * @param cls Optional css classes
     * @param okBtnText The text of the OK-Button
     * @param okBtnCls An optional css class for the OK-Button
     */
    DialogService.prototype.alert = function (title, message, cls, okBtnText, okBtnCls) {
        var _this = this;
        var subject$ = new Subject();
        var options = {
            title: title,
            content: message,
            clsDialog: cls,
            overlayClickClose: true
        };
        if (okBtnText) {
            options.actions = [{
                    caption: okBtnText,
                    cls: (okBtnCls ? okBtnCls : '') + ' js-dialog-close',
                    onclick: function () {
                        subject$.next();
                        subject$.complete();
                    }
                }];
        }
        var alertObj = this.create(options);
        return subject$.asObservable().pipe(finalize(function () {
            _this.close(alertObj);
        }));
    };
    /**
     * Shows a confirm dialog
     * @param title The title of the confirm
     * @param message The message of the confirm
     * @param yesBtnText The text for the Yes-Button
     * @param noBtnText The text for the No-Button
     * @param cls An optional css class for the dialog
     * @param yesBtnCls An optional css class for the Yes-Button
     * @param noBtnCls An optional css class for the No-Button
     */
    DialogService.prototype.confirm = function (title, message, yesBtnText, noBtnText, cls, yesBtnCls, noBtnCls) {
        var _this = this;
        var subject$ = new Subject();
        var options = {
            title: title,
            content: message,
            actions: [
                {
                    caption: yesBtnText ? yesBtnText : 'Yes',
                    cls: (yesBtnCls ? yesBtnCls : 'success') + ' js-dialog-close',
                    onclick: function () {
                        subject$.next(true);
                        subject$.complete();
                    }
                },
                {
                    caption: noBtnText ? noBtnText : 'No',
                    cls: (noBtnCls ? noBtnCls : 'alert') + ' js-dialog-close',
                    onclick: function () {
                        subject$.next(false);
                        subject$.complete();
                    }
                }
            ],
            clsDialog: cls
        };
        var confirmObj = this.create(options);
        return subject$.asObservable().pipe(finalize(function () {
            _this.close(confirmObj);
        }));
    };
    /**
     * Show a prompt dialog
     * @param title The title of the prompt
     * @param message The message of the prompt
     * @param submitBtnText The text of the Submit-Button
     * @param placeholder The placeholder of the input
     * @param cls An optional css class for the dialog
     * @param submitBtnCls An optional css class for Submit-Button
     * @param inputCls An optional css class for the input
     */
    DialogService.prototype.prompt = function (title, message, submitBtnText, placeholder, cls, submitBtnCls, inputCls) {
        var _this = this;
        var subject$ = new Subject();
        var options = {
            title: title,
            content: (message ? message : '') +
                ("<br><input data-role=\"input\" type=\"text\" class=\"" + inputCls + "\" placeholder=\"" + (placeholder ? placeholder : '') + "\" />"),
            actions: [
                {
                    caption: submitBtnText ? submitBtnText : 'Submit',
                    cls: (submitBtnCls ? submitBtnCls : 'success') + ' js-dialog-close',
                    onclick: function () {
                        subject$.next(value);
                        subject$.complete();
                    }
                }
            ],
            clsDialog: cls
        };
        var promptObj = this.create(options);
        var input = promptObj.find('input');
        var value = '';
        input.on('change', function () {
            value = input.val();
        });
        return subject$.asObservable().pipe(finalize(function () {
            _this.close(promptObj);
        }));
    };
    /**
     * Show a prompt dialog that contains a form
     * @param title The title of the prompt
     * @param form The form group
     * @param submitBtnText The text of the Submit-Button
     * @param abortBtnText The text of the Abort-Button
     * @param placeholder The placeholder of the input
     * @param cls An optional css class for the dialog
     * @param submitBtnCls An optional css class for Submit-Button
     * @param abortBtnCls An optional css class for Abort-Button
     */
    DialogService.prototype.formPrompt = function (title, form, submitBtnText, abortBtnText, placeholder, cls, submitBtnCls, abortBtnCls) {
        var _this = this;
        var componentRef = this.componentFactoryResolver.resolveComponentFactory(FormBuilderComponent).create(this.injector);
        componentRef.instance.formGroup = form;
        this.appRef.attachView(componentRef.hostView);
        var domElement = componentRef.hostView.rootNodes[0];
        var subject$ = new Subject();
        var options = {
            title: title,
            content: 'content',
            actions: [
                {
                    caption: abortBtnText ? abortBtnText : 'Abort',
                    cls: abortBtnCls ? abortBtnCls : 'warning',
                    onclick: function () {
                        subject$.next(null);
                        subject$.complete();
                    }
                },
                {
                    caption: submitBtnText ? submitBtnText : 'Submit',
                    cls: (submitBtnCls ? submitBtnCls : 'success') + ' submit-btn',
                    onclick: function () {
                        subject$.next(form.value);
                        subject$.complete();
                    }
                }
            ],
            clsDialog: cls
        };
        var promptObj = this.create(options);
        promptObj.find('.dialog-content').empty().append(domElement);
        var formStateSubscription = form.statusChanges.pipe(startWith(form.status)).subscribe(function (valid) {
            var submitBtn = promptObj.find('.dialog-actions button.submit-btn');
            if (valid === 'VALID') {
                submitBtn.removeAttr('disabled');
            }
            else {
                submitBtn.attr('disabled', 'disabled');
            }
        });
        return subject$.asObservable().pipe(finalize(function () {
            _this.close(promptObj);
            componentRef.destroy();
            formStateSubscription.unsubscribe();
        }));
    };
    /**
     * Show a dialog that contains a component
     * @param component The component class to render
     * @param dialogData Data to pass to the new component instance
     * @param title The title of the dialog
     * @param closeBtnText Custom text for the close button
     * @param cls Custom dialog class (accent, size etc.)
     * @param closeBtnCls Custom close button class
     */
    DialogService.prototype.show = function (component, dialogData, title, closeBtnText, cls, closeBtnCls) {
        var _this = this;
        var componentRef = this.componentFactoryResolver.resolveComponentFactory(component).create(this.injector);
        if (!!dialogData) {
            componentRef.instance.dialogDataInput = dialogData;
        }
        this.appRef.attachView(componentRef.hostView);
        var domElement = componentRef.hostView.rootNodes[0];
        var subject$ = new Subject();
        var dialogDataSubscription;
        if (!!componentRef.instance.dialogDataEmitter) {
            dialogDataSubscription = componentRef.instance.dialogDataEmitter
                .pipe(finalize(function () {
                subject$.complete();
            })).subscribe(function (data) {
                subject$.next(data);
            });
        }
        var options = {
            title: title,
            content: $(domElement),
            actions: [
                {
                    caption: closeBtnText ? closeBtnText : 'Submit',
                    cls: (closeBtnCls ? closeBtnCls : 'success') + ' submit-btn',
                    onclick: function () {
                        subject$.complete();
                    }
                }
            ],
            clsDialog: cls
        };
        var dialogObj = this.create(options);
        return subject$.asObservable().pipe(finalize(function () {
            if (dialogDataSubscription) {
                dialogDataSubscription.unsubscribe();
            }
            _this.close(dialogObj);
            componentRef.destroy();
        }));
    };
    /**
     * Show an info dialog
     * @param content The content of the info
     * @param options Options for info
     */
    DialogService.prototype.info = function (content, options) {
        return window.Metro.infobox.create(content, '', options).data('infobox');
    };
    DialogService.ctorParameters = function () { return [
        { type: ComponentFactoryResolver },
        { type: ApplicationRef },
        { type: Injector }
    ]; };
    DialogService = __decorate([
        Injectable(),
        __metadata("design:paramtypes", [ComponentFactoryResolver,
            ApplicationRef,
            Injector])
    ], DialogService);
    return DialogService;
}());
export { DialogService };
//# sourceMappingURL=data:application/json;base64,