import { __decorate, __metadata } from "tslib";
import { ChangeDetectionStrategy, Component, ContentChild, ElementRef, ViewChild } from '@angular/core';
import { PopoverDirective } from './popover.directive';
import { asapScheduler } from 'rxjs';
var PopoverComponent = /** @class */ (function () {
    function PopoverComponent() {
    }
    PopoverComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        asapScheduler.schedule(function () {
            _this.popover.popoverObj.options.onPopoverShow = function () {
                if (_this.popover.popoverObj.popover) {
                    $(_this.content.nativeElement).children().appendTo(_this.popover.popoverObj.popover.find('.popover-content'));
                    _this.popover.popoverObj.size = Metro.utils.hiddenElementSize(_this.popover.popoverObj.popover);
                    _this.popover.popoverObj.setPosition();
                }
            };
            _this.popover.popoverObj.options.onPopoverHide = function () {
                asapScheduler.schedule(function () {
                    if (_this.popover.popoverObj && _this.popover.popoverObj.popover) {
                        _this.popover.popoverObj.popover.find('.popover-content').children().appendTo($(_this.content.nativeElement));
                    }
                }, 300);
            };
        }, 1);
    };
    __decorate([
        ContentChild(PopoverDirective, { static: true }),
        __metadata("design:type", PopoverDirective)
    ], PopoverComponent.prototype, "popover", void 0);
    __decorate([
        ViewChild('popoverContent', { static: true }),
        __metadata("design:type", ElementRef)
    ], PopoverComponent.prototype, "content", void 0);
    PopoverComponent = __decorate([
        Component({
            selector: 'm4-popover',
            template: "<ng-content></ng-content>\r\n\r\n<div class=\"m4-popover-content\" #popoverContent>\r\n  <ng-content select=\"[content]\"></ng-content>\r\n</div>\r\n",
            changeDetection: ChangeDetectionStrategy.OnPush,
            styles: [".m4-popover-content{display:none}"]
        })
    ], PopoverComponent);
    return PopoverComponent;
}());
export { PopoverComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9wb3Zlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZy1tZXRybzQvIiwic291cmNlcyI6WyJsaWIvY29udHJvbHMvcG9wb3Zlci9wb3BvdmVyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFnQix1QkFBdUIsRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDckgsT0FBTyxFQUFDLGdCQUFnQixFQUFDLE1BQU0scUJBQXFCLENBQUM7QUFDckQsT0FBTyxFQUFDLGFBQWEsRUFBQyxNQUFNLE1BQU0sQ0FBQztBQVduQztJQUFBO0lBd0JBLENBQUM7SUFwQkMsMENBQWUsR0FBZjtRQUFBLGlCQW1CQztRQWxCQyxhQUFhLENBQUMsUUFBUSxDQUFDO1lBQ3JCLEtBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxhQUFhLEdBQUc7Z0JBQzlDLElBQUksS0FBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsT0FBTyxFQUFFO29CQUNuQyxDQUFDLENBQUMsS0FBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxRQUFRLENBQUMsS0FBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUM7b0JBRTVHLEtBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLGlCQUFpQixDQUFDLEtBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDO29CQUM5RixLQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxXQUFXLEVBQUUsQ0FBQztpQkFDdkM7WUFDSCxDQUFDLENBQUM7WUFFRixLQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsYUFBYSxHQUFHO2dCQUM5QyxhQUFhLENBQUMsUUFBUSxDQUFDO29CQUNyQixJQUFJLEtBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxJQUFJLEtBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLE9BQU8sRUFBRTt3QkFDOUQsS0FBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsS0FBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO3FCQUM3RztnQkFDSCxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7WUFDVixDQUFDLENBQUM7UUFDSixDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDUixDQUFDO0lBdEJpRDtRQUFqRCxZQUFZLENBQUMsZ0JBQWdCLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUM7a0NBQVUsZ0JBQWdCO3FEQUFDO0lBQzdCO1FBQTlDLFNBQVMsQ0FBQyxnQkFBZ0IsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsQ0FBQztrQ0FBVSxVQUFVO3FEQUFDO0lBRnhELGdCQUFnQjtRQU41QixTQUFTLENBQUM7WUFDVCxRQUFRLEVBQUUsWUFBWTtZQUN0QixpS0FBdUM7WUFFdkMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07O1NBQ2hELENBQUM7T0FDVyxnQkFBZ0IsQ0F3QjVCO0lBQUQsdUJBQUM7Q0FBQSxBQXhCRCxJQXdCQztTQXhCWSxnQkFBZ0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0FmdGVyVmlld0luaXQsIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDb21wb25lbnQsIENvbnRlbnRDaGlsZCwgRWxlbWVudFJlZiwgVmlld0NoaWxkfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHtQb3BvdmVyRGlyZWN0aXZlfSBmcm9tICcuL3BvcG92ZXIuZGlyZWN0aXZlJztcclxuaW1wb3J0IHthc2FwU2NoZWR1bGVyfSBmcm9tICdyeGpzJztcclxuXHJcbmRlY2xhcmUgdmFyICQ6IGFueTtcclxuZGVjbGFyZSB2YXIgTWV0cm86IGFueTtcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnbTQtcG9wb3ZlcicsXHJcbiAgdGVtcGxhdGVVcmw6ICcuL3BvcG92ZXIuY29tcG9uZW50Lmh0bWwnLFxyXG4gIHN0eWxlVXJsczogWycuL3BvcG92ZXIuY29tcG9uZW50LmNzcyddLFxyXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBQb3BvdmVyQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCB7XHJcbiAgQENvbnRlbnRDaGlsZChQb3BvdmVyRGlyZWN0aXZlLCB7IHN0YXRpYzogdHJ1ZSB9KSBwb3BvdmVyOiBQb3BvdmVyRGlyZWN0aXZlO1xyXG4gIEBWaWV3Q2hpbGQoJ3BvcG92ZXJDb250ZW50JywgeyBzdGF0aWM6IHRydWUgfSkgY29udGVudDogRWxlbWVudFJlZjtcclxuXHJcbiAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQge1xyXG4gICAgYXNhcFNjaGVkdWxlci5zY2hlZHVsZSgoKSA9PiB7XHJcbiAgICAgIHRoaXMucG9wb3Zlci5wb3BvdmVyT2JqLm9wdGlvbnMub25Qb3BvdmVyU2hvdyA9ICgpID0+IHtcclxuICAgICAgICBpZiAodGhpcy5wb3BvdmVyLnBvcG92ZXJPYmoucG9wb3Zlcikge1xyXG4gICAgICAgICAgJCh0aGlzLmNvbnRlbnQubmF0aXZlRWxlbWVudCkuY2hpbGRyZW4oKS5hcHBlbmRUbyh0aGlzLnBvcG92ZXIucG9wb3Zlck9iai5wb3BvdmVyLmZpbmQoJy5wb3BvdmVyLWNvbnRlbnQnKSk7XHJcblxyXG4gICAgICAgICAgdGhpcy5wb3BvdmVyLnBvcG92ZXJPYmouc2l6ZSA9IE1ldHJvLnV0aWxzLmhpZGRlbkVsZW1lbnRTaXplKHRoaXMucG9wb3Zlci5wb3BvdmVyT2JqLnBvcG92ZXIpO1xyXG4gICAgICAgICAgdGhpcy5wb3BvdmVyLnBvcG92ZXJPYmouc2V0UG9zaXRpb24oKTtcclxuICAgICAgICB9XHJcbiAgICAgIH07XHJcblxyXG4gICAgICB0aGlzLnBvcG92ZXIucG9wb3Zlck9iai5vcHRpb25zLm9uUG9wb3ZlckhpZGUgPSAoKSA9PiB7XHJcbiAgICAgICAgYXNhcFNjaGVkdWxlci5zY2hlZHVsZSgoKSA9PiB7XHJcbiAgICAgICAgICBpZiAodGhpcy5wb3BvdmVyLnBvcG92ZXJPYmogJiYgdGhpcy5wb3BvdmVyLnBvcG92ZXJPYmoucG9wb3Zlcikge1xyXG4gICAgICAgICAgICB0aGlzLnBvcG92ZXIucG9wb3Zlck9iai5wb3BvdmVyLmZpbmQoJy5wb3BvdmVyLWNvbnRlbnQnKS5jaGlsZHJlbigpLmFwcGVuZFRvKCQodGhpcy5jb250ZW50Lm5hdGl2ZUVsZW1lbnQpKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9LCAzMDApO1xyXG4gICAgICB9O1xyXG4gICAgfSwgMSk7XHJcbiAgfVxyXG59XHJcbiJdfQ==