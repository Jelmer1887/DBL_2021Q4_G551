import { __decorate, __extends, __metadata } from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, ElementRef, forwardRef, Input, QueryList, ViewChildren } from '@angular/core';
import { DefaultValueAccessor } from '../../helper/default-value-accessor';
import { ControlBase } from '../control-base';
import { RadioComponent } from '../radio/radio.component';
import { StringHelper } from '../../helper/string-helper';
import { TypeAlias } from '../../helper/type-alias';
import { asapScheduler } from 'rxjs';
var RadioGroupComponent = /** @class */ (function (_super) {
    __extends(RadioGroupComponent, _super);
    function RadioGroupComponent(element, cdRef) {
        var _this = _super.call(this, element, cdRef) || this;
        _this.name = StringHelper.guid();
        return _this;
    }
    RadioGroupComponent_1 = RadioGroupComponent;
    RadioGroupComponent.prototype.createControl = function () {
        var _this = this;
        return new Promise(function (complete) {
            asapScheduler.schedule(function () {
                _this.radios = !!_this.options ? _this.radiosView : _this.radiosContent;
                var radioCreations = _this.radios.map(function (item) {
                    return new Promise(function (radioComplete) {
                        item.name = _this.name;
                        item.registerOnChange(function (v) {
                            _this.changeValue(v);
                            _this.newValue();
                        });
                        item.registerOnTouched(function () {
                            _this.touchCallback();
                        });
                        asapScheduler.schedule(function () {
                            item.createControl().then(function () {
                                radioComplete();
                            });
                        }, 1);
                    });
                });
                Promise.all(radioCreations).then(function () {
                    _this.callNewValue();
                    complete();
                });
            });
        });
    };
    RadioGroupComponent.prototype.disable = function (disabled) {
        this.radios.forEach(function (item) {
            asapScheduler.schedule(function () {
                item.disable(disabled);
            }, 1);
        });
    };
    RadioGroupComponent.prototype.newValue = function () {
        var _this = this;
        if (!this.radios) {
            return;
        }
        this.radios.forEach(function (item) {
            item.writeValue(_this.innerValue);
        });
    };
    RadioGroupComponent.prototype.newClassValue = function (newClasses, oldClasses) {
        this.radios.forEach(function (item) {
            asapScheduler.schedule(function () {
                item.newClassValue(newClasses, oldClasses);
            }, 1);
        });
    };
    var RadioGroupComponent_1;
    RadioGroupComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ChangeDetectorRef }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], RadioGroupComponent.prototype, "options", void 0);
    __decorate([
        ContentChildren(forwardRef(function () { return RadioComponent; }), { descendants: true }),
        __metadata("design:type", QueryList)
    ], RadioGroupComponent.prototype, "radiosContent", void 0);
    __decorate([
        ViewChildren(forwardRef(function () { return RadioComponent; })),
        __metadata("design:type", QueryList)
    ], RadioGroupComponent.prototype, "radiosView", void 0);
    RadioGroupComponent = RadioGroupComponent_1 = __decorate([
        Component({
            selector: 'm4-radio-group',
            template: "<ng-container *ngIf=\"options; else noOptions\">\r\n  <m4-radio *ngFor=\"let option of options | objectKeys\" [value]=\"options[option]\"\r\n            [caption]=\"option\" [name]=\"name\"></m4-radio>\r\n</ng-container>\r\n<ng-template #noOptions>\r\n  <ng-content></ng-content>\r\n</ng-template>\r\n",
            providers: [DefaultValueAccessor.get(RadioGroupComponent_1), TypeAlias.get(RadioGroupComponent_1)],
            changeDetection: ChangeDetectionStrategy.OnPush,
            styles: [""]
        }),
        __metadata("design:paramtypes", [ElementRef, ChangeDetectorRef])
    ], RadioGroupComponent);
    return RadioGroupComponent;
}(ControlBase));
export { RadioGroupComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFkaW8tZ3JvdXAuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctbWV0cm80LyIsInNvdXJjZXMiOlsibGliL2Zvcm0vcmFkaW8tZ3JvdXAvcmFkaW8tZ3JvdXAuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0wsdUJBQXVCLEVBQ3ZCLGlCQUFpQixFQUNqQixTQUFTLEVBQ1QsZUFBZSxFQUNmLFVBQVUsRUFDVixVQUFVLEVBQ1YsS0FBSyxFQUNMLFNBQVMsRUFDVCxZQUFZLEVBQ2IsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFDLG9CQUFvQixFQUFDLE1BQU0scUNBQXFDLENBQUM7QUFDekUsT0FBTyxFQUFDLFdBQVcsRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBQzVDLE9BQU8sRUFBQyxjQUFjLEVBQUMsTUFBTSwwQkFBMEIsQ0FBQztBQUN4RCxPQUFPLEVBQUMsWUFBWSxFQUFDLE1BQU0sNEJBQTRCLENBQUM7QUFDeEQsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLHlCQUF5QixDQUFDO0FBQ2xELE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFXbkM7SUFBeUMsdUNBQWdCO0lBV3ZELDZCQUFZLE9BQW1CLEVBQUUsS0FBd0I7UUFBekQsWUFDRSxrQkFBTSxPQUFPLEVBQUUsS0FBSyxDQUFDLFNBRXRCO1FBREMsS0FBSSxDQUFDLElBQUksR0FBRyxZQUFZLENBQUMsSUFBSSxFQUFFLENBQUM7O0lBQ2xDLENBQUM7NEJBZFUsbUJBQW1CO0lBZ0I5QiwyQ0FBYSxHQUFiO1FBQUEsaUJBZ0NDO1FBL0JDLE9BQU8sSUFBSSxPQUFPLENBQU8sVUFBQyxRQUFRO1lBQ2hDLGFBQWEsQ0FBQyxRQUFRLENBQUM7Z0JBQ3JCLEtBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLEtBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEtBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFD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LGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNOztTQUNoRCxDQUFDO3lDQVlxQixVQUFVLEVBQVMsaUJBQWlCO09BWDlDLG1CQUFtQixDQTJFL0I7SUFBRCwwQkFBQztDQUFBLEFBM0VELENBQXlDLFdBQVcsR0EyRW5EO1NBM0VZLG1CQUFtQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XHJcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXHJcbiAgQ2hhbmdlRGV0ZWN0b3JSZWYsXHJcbiAgQ29tcG9uZW50LFxyXG4gIENvbnRlbnRDaGlsZHJlbixcclxuICBFbGVtZW50UmVmLFxyXG4gIGZvcndhcmRSZWYsXHJcbiAgSW5wdXQsXHJcbiAgUXVlcnlMaXN0LFxyXG4gIFZpZXdDaGlsZHJlblxyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge0RlZmF1bHRWYWx1ZUFjY2Vzc29yfSBmcm9tICcuLi8uLi9oZWxwZXIvZGVmYXVsdC12YWx1ZS1hY2Nlc3Nvcic7XHJcbmltcG9ydCB7Q29udHJvbEJhc2V9IGZyb20gJy4uL2NvbnRyb2wtYmFzZSc7XHJcbmltcG9ydCB7UmFkaW9Db21wb25lbnR9IGZyb20gJy4uL3JhZGlvL3JhZGlvLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7U3RyaW5nSGVscGVyfSBmcm9tICcuLi8uLi9oZWxwZXIvc3RyaW5nLWhlbHBlcic7XHJcbmltcG9ydCB7VHlwZUFsaWFzfSBmcm9tICcuLi8uLi9oZWxwZXIvdHlwZS1hbGlhcyc7XHJcbmltcG9ydCB7YXNhcFNjaGVkdWxlcn0gZnJvbSAncnhqcyc7XHJcblxyXG5kZWNsYXJlIHZhciAkOiBhbnk7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ200LXJhZGlvLWdyb3VwJyxcclxuICB0ZW1wbGF0ZVVybDogJy4vcmFkaW8tZ3JvdXAuY29tcG9uZW50Lmh0bWwnLFxyXG4gIHN0eWxlVXJsczogWycuL3JhZGlvLWdyb3VwLmNvbXBvbmVudC5jc3MnXSxcclxuICBwcm92aWRlcnM6IFtEZWZhdWx0VmFsdWVBY2Nlc3Nvci5nZXQoUmFkaW9Hcm91cENvbXBvbmVudCksIFR5cGVBbGlhcy5nZXQoUmFkaW9Hcm91cENvbXBvbmVudCldLFxyXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBSYWRpb0dyb3VwQ29tcG9uZW50IGV4dGVuZHMgQ29udHJvbEJhc2U8YW55PiB7XHJcblxyXG4gIEBJbnB1dCgpIG9wdGlvbnM6IHsgW3RpdGxlOiBzdHJpbmddOiBhbnkgfTtcclxuXHJcbiAgQENvbnRlbnRDaGlsZHJlbihmb3J3YXJkUmVmKCgpID0+IFJhZGlvQ29tcG9uZW50KSwgeyBkZXNjZW5kYW50czogdHJ1ZSB9KSByYWRpb3NDb250ZW50OiBRdWVyeUxpc3Q8UmFkaW9Db21wb25lbnQ+O1xyXG4gIEBWaWV3Q2hpbGRyZW4oZm9yd2FyZFJlZigoKSA9PiBSYWRpb0NvbXBvbmVudCkpIHJhZGlvc1ZpZXc6IFF1ZXJ5TGlzdDxSYWRpb0NvbXBvbmVudD47XHJcblxyXG4gIHByaXZhdGUgcmFkaW9zOiBRdWVyeUxpc3Q8UmFkaW9Db21wb25lbnQ+O1xyXG5cclxuICBwdWJsaWMgbmFtZTogc3RyaW5nO1xyXG5cclxuICBjb25zdHJ1Y3RvcihlbGVtZW50OiBFbGVtZW50UmVmLCBjZFJlZjogQ2hhbmdlRGV0ZWN0b3JSZWYpIHtcclxuICAgIHN1cGVyKGVsZW1lbnQsIGNkUmVmKTtcclxuICAgIHRoaXMubmFtZSA9IFN0cmluZ0hlbHBlci5ndWlkKCk7XHJcbiAgfVxyXG5cclxuICBjcmVhdGVDb250cm9sKCkge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlPHZvaWQ+KChjb21wbGV0ZSkgPT4ge1xyXG4gICAgICBhc2FwU2NoZWR1bGVyLnNjaGVkdWxlKCgpID0+IHtcclxuICAgICAgICB0aGlzLnJhZGlvcyA9ICEhdGhpcy5vcHRpb25zID8gdGhpcy5yYWRpb3NWaWV3IDogdGhpcy5yYWRpb3NDb250ZW50O1xyXG5cclxuICAgICAgICBjb25zdCByYWRpb0NyZWF0aW9ucyA9IHRoaXMucmFkaW9zLm1hcCgoaXRlbSkgPT4ge1xyXG4gICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlPHZvaWQ+KChyYWRpb0NvbXBsZXRlKSA9PiB7XHJcbiAgICAgICAgICAgIGl0ZW0ubmFtZSA9IHRoaXMubmFtZTtcclxuICAgICAgICAgICAgaXRlbS5yZWdpc3Rlck9uQ2hhbmdlKCh2KSA9PiB7XHJcbiAgICAgICAgICAgICAgdGhpcy5jaGFuZ2VWYWx1ZSh2KTtcclxuICAgICAgICAgICAgICB0aGlzLm5ld1ZhbHVlKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgaXRlbS5yZWdpc3Rlck9uVG91Y2hlZCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgdGhpcy50b3VjaENhbGxiYWNrKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgYXNhcFNjaGVkdWxlci5zY2hlZHVsZSgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgaXRlbS5jcmVhdGVDb250cm9sKCkudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICByYWRpb0NvbXBsZXRlKCk7XHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0sIDEpO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIFByb21pc2UuYWxsKHJhZGlvQ3JlYXRpb25zKS50aGVuKCgpID0+IHtcclxuICAgICAgICAgIHRoaXMuY2FsbE5ld1ZhbHVlKCk7XHJcbiAgICAgICAgICBjb21wbGV0ZSgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG5cclxuICB9XHJcblxyXG4gIGRpc2FibGUoZGlzYWJsZWQ6IGJvb2xlYW4pOiB2b2lkIHtcclxuICAgIHRoaXMucmFkaW9zLmZvckVhY2goKGl0ZW0pID0+IHtcclxuICAgICAgYXNhcFNjaGVkdWxlci5zY2hlZHVsZSgoKSA9PiB7XHJcbiAgICAgICAgaXRlbS5kaXNhYmxlKGRpc2FibGVkKTtcclxuICAgICAgfSwgMSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIG5ld1ZhbHVlKCk6IHZvaWQge1xyXG4gICAgaWYgKCF0aGlzLnJhZGlvcykge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5yYWRpb3MuZm9yRWFjaCgoaXRlbSkgPT4ge1xyXG4gICAgICBpdGVtLndyaXRlVmFsdWUodGhpcy5pbm5lclZhbHVlKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgbmV3Q2xhc3NWYWx1ZShuZXdDbGFzc2VzOiBzdHJpbmdbXSwgb2xkQ2xhc3Nlczogc3RyaW5nW10pIHtcclxuICAgIHRoaXMucmFkaW9zLmZvckVhY2goKGl0ZW0pID0+IHtcclxuICAgICAgYXNhcFNjaGVkdWxlci5zY2hlZHVsZSgoKSA9PiB7XHJcbiAgICAgICAgaXRlbS5uZXdDbGFzc1ZhbHVlKG5ld0NsYXNzZXMsIG9sZENsYXNzZXMpO1xyXG4gICAgICB9LCAxKTtcclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG4iXX0=