import { __decorate, __extends, __metadata } from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, ElementRef, forwardRef, Input, QueryList, ViewChildren } from '@angular/core';
import { ControlBase } from '../control-base';
import { DefaultValueAccessor } from '../../helper/default-value-accessor';
import { CheckboxComponent } from '../checkbox/checkbox.component';
import { ArrayHelper } from '../../helper/array-helper';
import { TypeAlias } from '../../helper/type-alias';
import { asapScheduler } from 'rxjs';
var CheckboxGroupComponent = /** @class */ (function (_super) {
    __extends(CheckboxGroupComponent, _super);
    function CheckboxGroupComponent(element, cdRef) {
        var _this = _super.call(this, element, cdRef) || this;
        _this.readonly = false;
        return _this;
    }
    CheckboxGroupComponent_1 = CheckboxGroupComponent;
    CheckboxGroupComponent.prototype.createControl = function () {
        var _this = this;
        return new Promise(function (complete) {
            asapScheduler.schedule(function () {
                _this.checkboxes = !!_this.options ? _this.checkboxesView : _this.checkboxesContent;
                var checkboxCreations = _this.checkboxes.map(function (item) {
                    return new Promise(function (checkboxComplete) {
                        item.updateProperty('readonly', _this.readonly);
                        item.registerOnChange(function (v) {
                            _this.computeInnerValue();
                        });
                        item.registerOnTouched(function () {
                            _this.touchCallback();
                        });
                        asapScheduler.schedule(function () {
                            item.createControl().then(function () {
                                checkboxComplete();
                            });
                        });
                    });
                });
                Promise.all(checkboxCreations).then(function () {
                    _this.callNewValue();
                    complete();
                });
            });
        });
    };
    CheckboxGroupComponent.prototype.computeInnerValue = function () {
        var values = this.checkboxes.filter(function (item) { return item.innerValue === true && item.value; }).map(function (item) { return item.value; });
        this.changeValue(values);
    };
    CheckboxGroupComponent.prototype.disable = function (disabled) {
        this.checkboxes.forEach(function (item) {
            asapScheduler.schedule(function () {
                item.disable(disabled);
            });
        });
    };
    CheckboxGroupComponent.prototype.newValue = function () {
        var _this = this;
        if (!this.checkboxes) {
            return;
        }
        this.checkboxes.forEach(function (item) {
            item.writeValue(_this.innerValue && ArrayHelper.contains(_this.innerValue, item.value));
        });
    };
    CheckboxGroupComponent.prototype.newClassValue = function (newClasses, oldClasses) {
        this.checkboxes.forEach(function (item) {
            asapScheduler.schedule(function () {
                item.newClassValue(newClasses, oldClasses);
            }, 1);
        });
    };
    var CheckboxGroupComponent_1;
    CheckboxGroupComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ChangeDetectorRef }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], CheckboxGroupComponent.prototype, "readonly", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], CheckboxGroupComponent.prototype, "options", void 0);
    __decorate([
        ContentChildren(forwardRef(function () { return CheckboxComponent; }), { descendants: true }),
        __metadata("design:type", QueryList)
    ], CheckboxGroupComponent.prototype, "checkboxesContent", void 0);
    __decorate([
        ViewChildren(forwardRef(function () { return CheckboxComponent; })),
        __metadata("design:type", QueryList)
    ], CheckboxGroupComponent.prototype, "checkboxesView", void 0);
    CheckboxGroupComponent = CheckboxGroupComponent_1 = __decorate([
        Component({
            selector: 'm4-checkbox-group',
            template: "<ng-container *ngIf=\"options; else noOptions\">\r\n  <m4-checkbox *ngFor=\"let option of options | objectKeys\" [value]=\"options[option]\" [caption]=\"option\"></m4-checkbox>\r\n</ng-container>\r\n<ng-template #noOptions>\r\n  <ng-content></ng-content>\r\n</ng-template>\r\n",
            providers: [DefaultValueAccessor.get(CheckboxGroupComponent_1), TypeAlias.get(CheckboxGroupComponent_1)],
            changeDetection: ChangeDetectionStrategy.OnPush,
            styles: [""]
        }),
        __metadata("design:paramtypes", [ElementRef, ChangeDetectorRef])
    ], CheckboxGroupComponent);
    return CheckboxGroupComponent;
}(ControlBase));
export { CheckboxGroupComponent };
//# sourceMappingURL=data:application/json;base64,