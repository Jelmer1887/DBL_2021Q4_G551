import { __decorate, __extends, __metadata } from "tslib";
import { ChangeDetectionStrategy, Component, ElementRef, Input, ViewChild } from '@angular/core';
import { DefaultValueAccessor } from '../../helper/default-value-accessor';
import { ControlBase } from '../control-base';
import { TypeAlias } from '../../helper/type-alias';
import { asapScheduler } from 'rxjs';
import { ObjectHelper } from '../../helper/object-helper';
var KeypadComponent = /** @class */ (function (_super) {
    __extends(KeypadComponent, _super);
    function KeypadComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = 'text';
        return _this;
    }
    KeypadComponent_1 = KeypadComponent;
    KeypadComponent.prototype.createControl = function () {
        var _this = this;
        return new Promise(function (complete) {
            var originalElement = $(_this.input.nativeElement);
            ObjectHelper.hide(originalElement);
            if (_this.clonedElement) {
                _this.clonedElement.parent().remove();
            }
            _this.clonedElement = originalElement.clone();
            ObjectHelper.show(_this.clonedElement);
            originalElement.parent().append(_this.clonedElement);
            _this.keypad = _this.clonedElement.keypad().data('keypad');
            _this.clonedElement.one('blur', function () {
                _this.touchCallback();
            });
            _this.clonedElement.on('change', function () {
                asapScheduler.schedule(function () {
                    var newValue = _this.clonedElement.val();
                    if (_this.type === 'number') {
                        newValue = +newValue;
                    }
                    _this.changeValue(newValue);
                });
            });
            complete();
        });
    };
    KeypadComponent.prototype.disable = function (disabled) {
        if (disabled) {
            this.keypad.disable();
        }
        else {
            this.keypad.enable();
        }
    };
    KeypadComponent.prototype.newValue = function () {
        if (!this.keypad) {
            return;
        }
        this.keypad.val(this.innerValue ? this.innerValue.toString() : '');
    };
    KeypadComponent.prototype.newClassValue = function (newClasses, oldClasses) {
        if (this.clonedElement) {
            var target_1 = this.clonedElement.parent();
            oldClasses.forEach(function (cls) {
                target_1.removeClass(cls);
            });
            newClasses.forEach(function (cls) {
                target_1.addClass(cls);
            });
        }
    };
    var KeypadComponent_1;
    __decorate([
        Input('type'),
        __metadata("design:type", String)
    ], KeypadComponent.prototype, "type", void 0);
    __decorate([
        Input('key-size'),
        __metadata("design:type", Number)
    ], KeypadComponent.prototype, "keySize", void 0);
    __decorate([
        Input('keys'),
        __metadata("design:type", Array)
    ], KeypadComponent.prototype, "keys", void 0);
    __decorate([
        Input('key-length'),
        __metadata("design:type", Number)
    ], KeypadComponent.prototype, "keyLength", void 0);
    __decorate([
        Input('shuffle'),
        __metadata("design:type", Boolean)
    ], KeypadComponent.prototype, "shuffle", void 0);
    __decorate([
        Input('shuffle-count'),
        __metadata("design:type", Number)
    ], KeypadComponent.prototype, "shuffleCount", void 0);
    __decorate([
        Input('position'),
        __metadata("design:type", String)
    ], KeypadComponent.prototype, "position", void 0);
    __decorate([
        Input('dynamic-position'),
        __metadata("design:type", Boolean)
    ], KeypadComponent.prototype, "dynamicPosition", void 0);
    __decorate([
        Input('service-buttons'),
        __metadata("design:type", Boolean)
    ], KeypadComponent.prototype, "serviceButtons", void 0);
    __decorate([
        Input('show-value'),
        __metadata("design:type", Boolean)
    ], KeypadComponent.prototype, "showValue", void 0);
    __decorate([
        Input('open'),
        __metadata("design:type", Boolean)
    ], KeypadComponent.prototype, "open", void 0);
    __decorate([
        Input('size-as-keys'),
        __metadata("design:type", Boolean)
    ], KeypadComponent.prototype, "sizeAsKeys", void 0);
    __decorate([
        Input('cls-keypad'),
        __metadata("design:type", String)
    ], KeypadComponent.prototype, "clsKeypad", void 0);
    __decorate([
        Input('cls-input'),
        __metadata("design:type", String)
    ], KeypadComponent.prototype, "clsInput", void 0);
    __decorate([
        Input('cls-keys'),
        __metadata("design:type", String)
    ], KeypadComponent.prototype, "clsKeys", void 0);
    __decorate([
        Input('cls-key'),
        __metadata("design:type", String)
    ], KeypadComponent.prototype, "clsKey", void 0);
    __decorate([
        Input('cls-service-key'),
        __metadata("design:type", String)
    ], KeypadComponent.prototype, "clsServiceKey", void 0);
    __decorate([
        Input('cls-backspace'),
        __metadata("design:type", String)
    ], KeypadComponent.prototype, "clsBackspace", void 0);
    __decorate([
        Input('cls-clear'),
        __metadata("design:type", String)
    ], KeypadComponent.prototype, "clsClear", void 0);
    __decorate([
        ViewChild('input', { static: true }),
        __metadata("design:type", ElementRef)
    ], KeypadComponent.prototype, "input", void 0);
    KeypadComponent = KeypadComponent_1 = __decorate([
        Component({
            selector: 'm4-keypad',
            template: "<input [type]=\"type\" #input\r\n\r\n\r\n       [attr.data-key-size]=\"keySize\"\r\n       [attr.data-keys]=\"keys?.join(',')\"\r\n       [attr.data-key-length]=\"keyLength\"\r\n       [attr.data-shuffle]=\"shuffle\"\r\n       [attr.data-shuffle-count]=\"shuffleCount\"\r\n       [attr.data-position]=\"position\"\r\n       [attr.data-dynamic-position]=\"dynamicPosition\"\r\n       [attr.data-service-buttons]=\"serviceButtons\"\r\n       [attr.data-show-value]=\"showValue\"\r\n       [attr.data-open]=\"open\"\r\n       [attr.data-size-as-keys]=\"sizeAsKeys\"\r\n\r\n       [attr.data-cls-keypad]=\"clsKeypad\"\r\n       [attr.data-cls-input]=\"clsInput\"\r\n       [attr.data-cls-keys]=\"clsKeys\"\r\n       [attr.data-cls-key]=\"clsKey\"\r\n       [attr.data-cls-service-key]=\"clsServiceKey\"\r\n       [attr.data-cls-backspace]=\"clsBackspace\"\r\n       [attr.data-cls-clear]=\"clsClear\">\r\n",
            providers: [DefaultValueAccessor.get(KeypadComponent_1), TypeAlias.get(KeypadComponent_1)],
            changeDetection: ChangeDetectionStrategy.OnPush,
            styles: [""]
        })
    ], KeypadComponent);
    return KeypadComponent;
}(ControlBase));
export { KeypadComponent };
//# sourceMappingURL=data:application/json;base64,