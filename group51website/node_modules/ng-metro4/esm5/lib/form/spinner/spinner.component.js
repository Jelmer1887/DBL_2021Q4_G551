import { __decorate, __extends, __metadata } from "tslib";
import { ChangeDetectionStrategy, Component, ElementRef, Input, ViewChild } from '@angular/core';
import { ControlBase } from '../control-base';
import { DefaultValueAccessor } from '../../helper/default-value-accessor';
import { TypeAlias } from '../../helper/type-alias';
import { asapScheduler } from 'rxjs';
import { ObjectHelper } from '../../helper/object-helper';
var SpinnerComponent = /** @class */ (function (_super) {
    __extends(SpinnerComponent, _super);
    function SpinnerComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.step = 1;
        _this.fixed = 0;
        _this.hideCursor = false;
        return _this;
    }
    SpinnerComponent_1 = SpinnerComponent;
    SpinnerComponent.prototype.createControl = function () {
        var _this = this;
        return new Promise(function (complete) {
            var originalElement = $(_this.input.nativeElement);
            ObjectHelper.hide(originalElement);
            if (_this.clonedElement) {
                _this.clonedElement.parent().remove();
            }
            _this.clonedElement = originalElement.clone();
            ObjectHelper.show(_this.clonedElement);
            originalElement.parent().append(_this.clonedElement);
            _this.spinner = _this.clonedElement.spinner().data('spinner');
            _this.clonedElement.parent().off('mousedown mouseup keydown change');
            _this.clonedElement.one('blur', function () {
                _this.touchCallback();
            });
            _this.clonedElement.on('change', function () {
                if (_this.disableUpdate) {
                    return;
                }
                var newVal = +_this.clonedElement.val();
                _this.changeValue(newVal);
                _this.setValue(newVal);
            });
            complete();
        });
    };
    SpinnerComponent.prototype.disable = function (disabled) {
        if (disabled) {
            this.spinner.disable();
        }
        else {
            this.spinner.enable();
        }
    };
    SpinnerComponent.prototype.setValue = function (newValue) {
        var _this = this;
        if (this.minValue !== undefined && this.minValue !== null && newValue < this.minValue) {
            newValue = this.minValue;
            asapScheduler.schedule(function () {
                _this.changeValue(newValue);
            });
        }
        if (this.maxValue !== undefined && this.maxValue !== null && newValue > this.maxValue) {
            newValue = this.maxValue;
            asapScheduler.schedule(function () {
                _this.changeValue(newValue);
            });
        }
        this.clonedElement.val(newValue.toFixed(this.fixed));
    };
    SpinnerComponent.prototype.newValue = function () {
        if (!this.spinner || !this.innerValue) {
            return;
        }
        this.setValue(this.innerValue);
    };
    SpinnerComponent.prototype.newClassValue = function (newClasses, oldClasses) {
        if (this.clonedElement) {
            var target_1 = this.clonedElement.parent();
            oldClasses.forEach(function (cls) {
                target_1.removeClass(cls);
            });
            newClasses.forEach(function (cls) {
                target_1.addClass(cls);
            });
        }
    };
    var SpinnerComponent_1;
    __decorate([
        Input('step'),
        __metadata("design:type", Object)
    ], SpinnerComponent.prototype, "step", void 0);
    __decorate([
        Input('plus-icon'),
        __metadata("design:type", String)
    ], SpinnerComponent.prototype, "plusIcon", void 0);
    __decorate([
        Input('minus-icon'),
        __metadata("design:type", String)
    ], SpinnerComponent.prototype, "minusIcon", void 0);
    __decorate([
        Input('buttons-position'),
        __metadata("design:type", String)
    ], SpinnerComponent.prototype, "buttonsPosition", void 0);
    __decorate([
        Input('min-value'),
        __metadata("design:type", Number)
    ], SpinnerComponent.prototype, "minValue", void 0);
    __decorate([
        Input('max-value'),
        __metadata("design:type", Number)
    ], SpinnerComponent.prototype, "maxValue", void 0);
    __decorate([
        Input('fixed'),
        __metadata("design:type", Object)
    ], SpinnerComponent.prototype, "fixed", void 0);
    __decorate([
        Input('hide-cursor'),
        __metadata("design:type", Object)
    ], SpinnerComponent.prototype, "hideCursor", void 0);
    __decorate([
        Input('cls-spinner'),
        __metadata("design:type", String)
    ], SpinnerComponent.prototype, "clsSpinner", void 0);
    __decorate([
        Input('cls-spinner-input'),
        __metadata("design:type", String)
    ], SpinnerComponent.prototype, "clsSpinnerInput", void 0);
    __decorate([
        Input('cls-spinner-button'),
        __metadata("design:type", String)
    ], SpinnerComponent.prototype, "clsSpinnerButton", void 0);
    __decorate([
        Input('cls-spinner-button-plus'),
        __metadata("design:type", String)
    ], SpinnerComponent.prototype, "clsSpinnerButtonPlus", void 0);
    __decorate([
        Input('cls-spinner-button-minus'),
        __metadata("design:type", String)
    ], SpinnerComponent.prototype, "clsSpinnerButtonMinus", void 0);
    __decorate([
        ViewChild('input', { static: true }),
        __metadata("design:type", ElementRef)
    ], SpinnerComponent.prototype, "input", void 0);
    SpinnerComponent = SpinnerComponent_1 = __decorate([
        Component({
            selector: 'm4-spinner',
            template: "<input type=\"text\" #input\r\n\r\n\r\n       [attr.data-step]=\"step\"\r\n       [attr.data-fixed]=\"fixed\"\r\n       [attr.data-plus-icon]=\"plusIcon\"\r\n       [attr.data-minus-icon]=\"minusIcon\"\r\n       [attr.data-buttons-position]=\"buttonsPosition\"\r\n\r\n       [attr.data-hide-cursor]=\"hideCursor\"\r\n       [style.textShadow]=\"hideCursor ? '0 0 0 #1d1d1d' : null\"\r\n\r\n       [attr.data-cls-spinner]=\"clsSpinner\"\r\n       [attr.data-cls-spinner-input]=\"clsSpinnerInput\"\r\n       [attr.data-cls-spinner-button]=\"clsSpinnerButton\"\r\n       [attr.data-cls-spinner-button-minus]=\"clsSpinnerButtonMinus\"\r\n       [attr.data-cls-spinner-button-plus]=\"clsSpinnerButtonPlus\" >\r\n",
            providers: [DefaultValueAccessor.get(SpinnerComponent_1), TypeAlias.get(SpinnerComponent_1)],
            changeDetection: ChangeDetectionStrategy.OnPush,
            styles: [""]
        })
    ], SpinnerComponent);
    return SpinnerComponent;
}(ControlBase));
export { SpinnerComponent };
//# sourceMappingURL=data:application/json;base64,