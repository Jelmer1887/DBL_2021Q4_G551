import { __decorate, __metadata, __param } from "tslib";
import { AfterViewInit, ChangeDetectorRef, ElementRef, OnChanges, OnDestroy, Optional, SimpleChange, SimpleChanges, Directive } from '@angular/core';
import { ObjectHelper } from '../helper/object-helper';
import { asapScheduler } from 'rxjs';
import { AttributeHelper } from '../helper/attribute-helper';
var ControlBase = /** @class */ (function () {
    function ControlBase(mainElement, cdRef) {
        this.mainElement = mainElement;
        this.cdRef = cdRef;
        this.disableUpdate = false;
        this.touchCallback = function () { };
        this.changeCallback = function (_) { };
    }
    ControlBase.prototype.observeClassValue = function () {
        var _this = this;
        this.classObserver = AttributeHelper.createObserver(this.mainElement, function (newClasses, oldClasses) {
            _this.currentClasses = newClasses;
            _this.newClassValue(newClasses, oldClasses);
        });
    };
    ControlBase.prototype.changeValue = function (newValue, callback) {
        if (callback === void 0) { callback = true; }
        if (this.disableUpdate) {
            return;
        }
        if (ObjectHelper.compare(newValue, this.innerValue)) {
            return;
        }
        this.innerValue = newValue;
        if (callback) {
            this.changeCallback(this.innerValue);
        }
    };
    ControlBase.prototype.registerOnChange = function (fn) {
        this.changeCallback = fn;
    };
    ControlBase.prototype.registerOnTouched = function (fn) {
        this.touchCallback = fn;
    };
    ControlBase.prototype.setDisabledState = function (isDisabled) {
        this.disabled = isDisabled;
        this.disable(isDisabled);
    };
    ControlBase.prototype.callNewValue = function () {
        this.disableUpdate = true;
        this.newValue();
        this.disableUpdate = false;
    };
    ControlBase.prototype.writeValue = function (newValue) {
        this.innerValue = newValue;
        this.callNewValue();
    };
    ControlBase.prototype.ngAfterViewInit = function () {
        var _this = this;
        this.createControl().then(function () {
            _this.callNewValue();
            _this.observeClassValue();
        });
    };
    ControlBase.prototype.ngOnChanges = function (changes) {
        var _this = this;
        asapScheduler.schedule(function () {
            _this.createControl().then(function () {
                _this.setDisabledState(_this.disabled);
                _this.callNewValue();
                if (_this.currentClasses) {
                    _this.newClassValue(_this.currentClasses, []);
                }
            });
        });
    };
    ControlBase.prototype.ngOnDestroy = function () {
        if (this.classObserver) {
            this.classObserver.disconnect();
        }
    };
    ControlBase.prototype.updateProperty = function (key, newValue) {
        var oldValue = this[key];
        if (oldValue !== newValue) {
            this[key] = newValue;
            if (this.cdRef) {
                this.cdRef.detectChanges();
            }
            var changes = {};
            changes[key] = { previousValue: oldValue, currentValue: newValue, firstChange: false };
            this.ngOnChanges(changes);
        }
    };
    ControlBase.ctorParameters = function () { return [
        { type: ElementRef, decorators: [{ type: Optional }] },
        { type: ChangeDetectorRef }
    ]; };
    ControlBase = __decorate([
        Directive(),
        __param(0, Optional()),
        __metadata("design:paramtypes", [ElementRef, ChangeDetectorRef])
    ], ControlBase);
    return ControlBase;
}());
export { ControlBase };
//# sourceMappingURL=data:application/json;base64,